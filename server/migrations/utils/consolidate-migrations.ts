import * as fs from 'fs';
import * as path from 'path';
import * as knex from 'knex';
import * as dotenv from 'dotenv';

// Load environment variables
dotenv.config();

async function consolidateMigrations() {
  console.log('Starting migration consolidation process...');
  
  // Ensure DATABASE_URL is set
  if (!process.env.DATABASE_URL) {
    console.error('Error: DATABASE_URL environment variable is not set.');
    console.error('Please set it in your .env file or provide it when running this script:');
    console.error('DATABASE_URL=***REMOVED***ql://user:password@localhost:5432/dbname ts-node consolidate-migrations.ts');
    process.exit(1);
  }
  
  // Connect to database
  const db = knex({
    client: 'pg',
    connection: process.env.DATABASE_URL
  });
  
  try {
    console.log('Connected to database successfully');
    
    // Check if migrations table exists
    const hasMigrationsTable = await db.schema.hasTable('migrations');
    
    if (!hasMigrationsTable) {
      console.warn('Warning: migrations table does not exist in the database');
      console.log('Creating a migrations table to track consolidated migrations...');
      
      await db.schema.createTable('migrations', table => {
        table.increments('id').primary();
        table.string('name').unique().notNullable();
        table.timestamp('executed_at').defaultTo(db.fn.now());
      });
    }
    
    // Get list of applied migrations
    console.log('Fetching list of applied migrations...');
    const appliedMigrations = await db('migrations').select('name');
    const appliedNames = appliedMigrations.map(m => m.name);
    
    console.log(`Found ${appliedNames.length} applied migrations`);
    
    // Create Prisma migration
    const timestamp = new Date().toISOString().replace(/[-:.]/g, '').slice(0, 14);
    const migrationName = `${timestamp}_consolidate_migrations`;
    
    // Determine base directory - if running from utils, go up two levels, otherwise just one
    const isInUtils = __dirname.includes('utils');
    const baseDir = isInUtils 
      ? path.resolve(__dirname, '../../') 
      : path.resolve(__dirname, '../');
    
    const migrationDir = path.resolve(baseDir, 'prisma/migrations', migrationName);
    
    console.log(`Creating Prisma migration in: ${migrationDir}`);
    fs.mkdirSync(migrationDir, { recursive: true });
    
    // Create migration.sql file
    const migrationSql = `-- Consolidated migrations
-- Applied migrations: ${appliedNames.join(', ')}

-- This migration serves as a marker that all previous migrations have been applied
-- Future migrations will be managed through Prisma

-- Record the consolidation in our migrations table
INSERT INTO migrations (name, executed_at) 
VALUES ('${migrationName}', NOW()) 
ON CONFLICT (name) DO NOTHING;
`;
    
    const migrationSqlPath = path.join(migrationDir, 'migration.sql');
    fs.writeFileSync(migrationSqlPath, migrationSql);
    console.log(`Created migration.sql file at: ${migrationSqlPath}`);
    
    // Update migration_lock.toml
    const lockContent = `# Please do not edit this file manually
# It should be added in your version-control system (i.e. Git)
provider = "***REMOVED***ql"
`;
    
    const migrationLockPath = path.join(migrationDir, 'migration.lock');
    fs.writeFileSync(migrationLockPath, lockContent);
    console.log(`Created migration.lock file at: ${migrationLockPath}`);
    
    // Add this migration to the database to mark it as applied
    await db('migrations').insert({
      name: migrationName,
      executed_at: new Date()
    }).onConflict('name').ignore();
    
    console.log(`\nCreated consolidated migration: ${migrationName}`);
    console.log(`Migration files created in: ${migrationDir}`);
    console.log('\nNext steps:');
    console.log('1. Review the generated migration files');
    console.log('2. Update your deployment scripts to use Prisma migrations');
    console.log('3. Run "npx prisma migrate deploy" in your development environment to test');
  } catch (error) {
    console.error('Error consolidating migrations:', error);
    throw error;
  } finally {
    await db.destroy();
    console.log('Database connection closed');
  }
}

// Run the consolidation process
consolidateMigrations().catch(error => {
  console.error('Consolidation process failed:', error);
  process.exit(1);
}); 