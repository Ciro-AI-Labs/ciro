import { Module, Logger, Provider } from '@nestjs/common';
import { ConfigModule } from '@nestjs/config';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import { AuthModule } from './core/auth/auth.module';
// Only import BullModule if NO_BULL is not true
import { BullModule } from '@nestjs/bull';
import { APP_INTERCEPTOR } from '@nestjs/core';
import { LoggingInterceptor } from './common/interceptors/logging.interceptor';
import { HttpModule } from '@nestjs/axios';
import { PrismaModule } from './core/database/prisma.module';
import { ChatModule } from './modules/chat/chat.module';
import { WorkspaceModule } from './modules/workspace/workspace.module';
import { OrganizationModule } from './modules/organization/organization.module';
import { SearchModule } from './modules/search/search.module';
import { FileModule } from './modules/file/file.module';
import { DashboardModule } from './modules/dashboard/dashboard.module';
import { JobsModule } from './modules/jobs/jobs.module';
// Import these modules at the end to avoid circular dependencies
import { ServicesModule } from './services.module';
import { IngestionModule } from './services/ingestion/ingestion.module';
import { ProcessorsModule } from './services/datasources/processors/file/processors.module';
import { DataSourceModule } from './modules/data-source/data-source.module';
import { DocumentProcessingModule } from './modules/document-processing/document-processing.module';
import { VisualizationModule } from './modules/visualization/visualization.module';
import { DualPathModule } from './modules/dual-path/dual-path.module'; // Uncommented for testing
// import { OAuthModule } from './modules/oauth/oauth.module'; // Debug: Commented out
// import { SnowflakeModule } from './modules/snowflake/snowflake.module'; // Debug: Commented out
// import { WebhooksModule } from './services/webhooks/webhooks.module'; // Removed missing import
import { RedisHealthIndicator } from './common/health/redis.health';

// Check both Redis and Bull disabling flags
const IS_REDIS_DISABLED = process.env.REDIS_DISABLED === 'true';
const IS_BULL_DISABLED = process.env.NO_BULL === 'true';

console.log('>>> CONFIG: REDIS_DISABLED =', IS_REDIS_DISABLED);
console.log('>>> CONFIG: NO_BULL =', IS_BULL_DISABLED);

// Define which modules should be excluded when REDIS_DISABLED is true
const REDIS_DEPENDENT_MODULES = (IS_REDIS_DISABLED || IS_BULL_DISABLED) ? [] : [
  BullModule.forRootAsync({
    useFactory: () => {
      console.log('>>> INFO: Initializing Bull Redis queues');
      return {
        redis: {
          host: process.env.REDIS_HOST || 'localhost',
          port: parseInt(process.env.REDIS_PORT || '6379', 10),
          maxRetriesPerRequest: 3,
          connectTimeout: 5000, // 5 seconds timeout
          enableReadyCheck: false, // Don't wait for "ready" event
          enableOfflineQueue: false, // Don't queue commands when disconnected
          autoResendUnfulfilledCommands: false, // Don't auto-resend commands
          retryStrategy: (times: number) => {
            if (times > 3) {
              console.log('>>> WARNING: Redis connection failed after retries, giving up');
              return null; // Give up after 3 retries
            }
            return Math.min(times * 1000, 3000); // Max 3 second retry delay
          }
        },
        defaultJobOptions: {
          attempts: 3,
          removeOnComplete: true,
          removeOnFail: true,
        },
        limiter: {
          max: 50,
          duration: 1000,
        },
      };
    },
  }),
];

// Define core modules that are always needed
const CORE_MODULES = [
  ConfigModule.forRoot({
    isGlobal: true,
  }),
  HttpModule,
  PrismaModule, // Global module for database access
  
  // Core modules that should load first
  AuthModule,
  ChatModule,
  WorkspaceModule,
  OrganizationModule,
  SearchModule,
  FileModule,
  DashboardModule,
];

// Function to create fallback providers when Redis is disabled
function createFallbackProviders() {
  // Only create fallbacks if Redis or Bull is disabled
  if (process.env.REDIS_DISABLED !== 'true' && process.env.NO_BULL !== 'true') {
    return [];
  }

  return [
    // If you have any Redis-dependent services, add fallbacks here
    {
      provide: 'REDIS_CLIENT',
      useValue: {
        get: async () => null,
        set: async () => null,
        del: async () => null,
        exists: async () => false,
        // Add other methods as needed
      }
    },
    // Add mock Bull queue providers if needed
    {
      provide: 'BullQueue_document-processing',
      useValue: {
        add: async () => ({ id: `mock-${Date.now()}`, data: {} }),
        process: () => {}, 
        getJob: async () => null,
        // Other queue methods
      }
    }
  ];
}

// Define optional modules that might have Redis/Bull dependencies
const OPTIONAL_MODULES = IS_BULL_DISABLED ? [
  // Absolute minimum set of modules when Bull is disabled
  ServicesModule,
  DataSourceModule,
  DocumentProcessingModule,
  VisualizationModule,
  DualPathModule,
] : IS_REDIS_DISABLED ? [
  // Limited set of modules when Redis is disabled
  ServicesModule,
  DataSourceModule,
  DocumentProcessingModule,
  VisualizationModule,
  DualPathModule,
] : [
  // Full set of modules when Redis is available
  ServicesModule,
  IngestionModule,
  ProcessorsModule,
  DataSourceModule,
  DocumentProcessingModule,
  VisualizationModule,
  DualPathModule,
  JobsModule,
];

@Module({
  imports: [
    ...CORE_MODULES,
    ...REDIS_DEPENDENT_MODULES,
    ...OPTIONAL_MODULES,
  ],
  controllers: [AppController],
  providers: [
    AppService,
    Logger,
    {
      provide: APP_INTERCEPTOR,
      useClass: LoggingInterceptor,
    },
    ...createFallbackProviders(),
    RedisHealthIndicator,
    {
      provide: 'REDIS_HEALTH_INDICATOR',
      useExisting: RedisHealthIndicator,
    },
  ],
})
export class AppModule {
  constructor() {
    console.log('>>> APP MODULE: Constructor called');
    if (IS_REDIS_DISABLED || IS_BULL_DISABLED) {
      console.log('>>> APP MODULE: Running in Redis-disabled mode');
    }
  }
} 