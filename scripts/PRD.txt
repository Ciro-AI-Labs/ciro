# Ciro Project PRD - Focus: Server Refactoring to NestJS

## High-Level Goal
Refactor the existing Express.js server implementation to a modern NestJS architecture to improve structure, maintainability, scalability, and developer experience.

## Current Focus: Completing NestJS Migration & Core Improvements

Based on the progress outlined in docs/migrations.md, the following tasks are pending and need to be completed:

### Pending Tasks:

1.  **Controllers Review/Refactor**
    *   DataSourcesController:
        *   Implement Create handler
        *   Implement Update handler
        *   Implement Delete handler
        *   Implement Processing endpoint (POST /:id/process)
        *   Define CreateDataSourceDto
        *   Define UpdateDataSourceDto
    *   AutomationController: Review and refactor (implementation not started)
    *   WorkspaceController: Review and refactor (implementation not started)

2.  **Module Configuration Verification**
    *   Verify all refactored services are correctly provided in their respective modules.
    *   Ensure services intended for use in other modules are properly exported.
    *   Confirm correct importation of services and modules where needed.
    *   Perform a final review of `app.module.ts` for complete and accurate configuration.

3.  **Database Schema/Migrations**
    *   Confirm the current database schema aligns with the updated TypeORM entities after refactoring.
    *   Generate any necessary TypeORM migrations based on entity changes (especially the DataSource entity).
    *   Apply generated migrations to the database.

4.  **Testing**
    *   Implement unit tests for all refactored services.
    *   Create integration tests specifically for the document processing pipeline (including Bull queue interactions).
    *   Develop end-to-end API tests covering the main controller endpoints.

5.  **Documentation Updates**
    *   Update API documentation (e.g., Swagger/OpenAPI) to reflect refactored endpoints, DTOs, and responses.
    *   Document the new data source status flow.
    *   Document the background job processing implementation using Bull.

6.  **Code Cleanup and Processor Verification**
    *   Perform a general code cleanup across the refactored codebase.
    *   Verify the implementation and refactoring of all remaining Document Processors (beyond CustomDocxProcessorService) to ensure consistency with the new patterns (error handling, status updates, DocumentChunkingService usage, logging).

### Recommendations for Task Prioritization (From migrations.md):

*   **Priority High:**
    *   Complete DataSourcesController implementation.
    *   Generate and apply database migrations.
    *   Add basic test coverage (Unit tests for critical services, basic integration test for processing).
*   **Priority Medium:**
    *   Review and refactor remaining controllers (Automation, Workspace).
    *   Complete module configuration verification.
    *   Add comprehensive testing (more unit, integration, and E2E tests).
*   **Priority Low:**
    *   Update documentation.
    *   Optimize performance (if needed after refactoring).
    *   Add monitoring and metrics.

</rewritten_file> 