[1mdiff --git a/dashboard/src/components/Chat/about-chat-phases.mcd b/dashboard/src/components/Chat/about-chat-phases.mcd[m
[1mdeleted file mode 100644[m
[1mindex 21a5f39..0000000[m
[1m--- a/dashboard/src/components/Chat/about-chat-phases.mcd[m
[1m+++ /dev/null[m
[36m@@ -1,6 +0,0 @@[m
[31m-Would you like me to start implementing these improvements? We can tackle them in phases:[m
[31m-Phase 1: Component Structure & Basic UI[m
[31m-Phase 2: Enhanced Features (attachments, suggestions)[m
[31m-Phase 3: Thread Management[m
[31m-Phase 4: Performance & UX Improvements[m
[31m-Which area would you like me to focus on first?[m
\ No newline at end of file[m
[1mdiff --git a/dashboard/src/components/Chat/components/EnhancedStepByStepVisualization.tsx.backup b/dashboard/src/components/Chat/components/EnhancedStepByStepVisualization.tsx.backup[m
[1mdeleted file mode 100644[m
[1mindex 4512966..0000000[m
[1m--- a/dashboard/src/components/Chat/components/EnhancedStepByStepVisualization.tsx.backup[m
[1m+++ /dev/null[m
[36m@@ -1,2213 +0,0 @@[m
[31m-import React, { useState, useEffect, Suspense, useRef, useMemo, useCallback } from 'react';[m
[31m-import { motion } from 'framer-motion';[m
[31m-import { DataProcessingService } from '../../../services/DataProcessingService';[m
[31m-import { useNotification } from '../../../contexts/NotificationContext';[m
[31m-import { LazyVisualizationWrapper } from '../../../components/shared/LazyVisualization';[m
[31m-import { MessageMarkdown } from './MessageMarkdown';[m
[31m-import { TableFormatter } from '../../../services/TableFormatter';[m
[31m-import { TableVisualization } from '../../../Visualization/tables/TableVisualization';[m
[31m-[m
[31m-// Helper function to map our internal chart types to the expected chart types[m
[31m-function mapChartType(type: string): string {[m
[31m-  // Normalize the input type by removing underscores and converting to lowercase[m
[31m-  const normalizedType = type.toLowerCase().replace(/_/g, '').replace(/chart$/, '');[m
[31m-  [m
[31m-  // Debug log for chart type mapping[m
[31m-  console.debug(`[Chart Type Mapping] Original: "${type}", Normalized: "${normalizedType}"`);[m
[31m-  [m
[31m-  const typeMap: Record<string, string> = {[m
[31m-    'bar': 'bar',[m
[31m-    'barchart': 'bar',[m
[31m-    'bar_chart': 'bar',[m
[31m-    'line': 'line',[m
[31m-    'linechart': 'line',[m
[31m-    'line_chart': 'line',[m
[31m-    'pie': 'pie',[m
[31m-    'piechart': 'pie',[m
[31m-    'pie_chart': 'pie',[m
[31m-    'area': 'area',[m
[31m-    'areachart': 'area',[m
[31m-    'area_chart': 'area',[m
[31m-    'scatter': 'scatter',[m
[31m-    'scatterchart': 'scatter',[m
[31m-    'scatter_chart': 'scatter',[m
[31m-    'composed': 'composed',[m
[31m-    'composedchart': 'composed',[m
[31m-    'composed_chart': 'composed',[m
[31m-    'heatmap': 'heatmap',[m
[31m-    'heatmapchart': 'heatmap',[m
[31m-    'radar': 'radar',[m
[31m-    'radarchart': 'radar',[m
[31m-    'radar_chart': 'radar',[m
[31m-    'funnel': 'funnel',[m
[31m-    'funnelchart': 'funnel',[m
[31m-    'funnel_chart': 'funnel',[m
[31m-    'treemap': 'treemap',[m
[31m-    'treemapchart': 'treemap',[m
[31m-    'treemap_chart': 'treemap',[m
[31m-    'network': 'network',[m
[31m-    'networkgraph': 'network',[m
[31m-    'network_graph': 'network',[m
[31m-    'geospatial': 'geospatial',[m
[31m-    'geospatialmap': 'geospatial',[m
[31m-    'geospatial_map': 'geospatial',[m
[31m-    'sankey': 'sankey',[m
[31m-    'sankeydiagram': 'sankey',[m
[31m-    'sankey_diagram': 'sankey',[m
[31m-    'table': 'table'[m
[31m-  };[m
[31m-  [m
[31m-  // Try to match the normalized type first[m
[31m-  if (typeMap[normalizedType]) {[m
[31m-    const result = typeMap[normalizedType];[m
[31m-    console.debug(`[Chart Type Mapping] Matched normalized type: "${normalizedType}" â†’ "${result}"`);[m
[31m-    return result;[m
[31m-  }[m
[31m-  [m
[31m-  // If no match with normalized type, try the original type[m
[31m-  const result = typeMap[type] || type || 'bar';[m
[31m-  console.debug(`[Chart Type Mapping] Final result: "${result}"`);[m
[31m-  return result;[m
[31m-}[m
[31m-[m
[31m-// Helper function to validate and normalize visualization types[m
[31m-function validateVisualizationType(type: string | undefined): string {[m
[31m-  console.log(`[DEBUG] validateVisualizationType called with type: "${type}"`);[m
[31m-  [m
[31m-  if (!type) {[m
[31m-    console.log('[DEBUG] No type provided, defaulting to "bar"');[m
[31m-    return 'bar'; // Default to bar if no type provided[m
[31m-  }[m
[31m-  [m
[31m-  // Check URL parameters for forced chart type[m
[31m-  try {[m
[31m-    const urlParams = new URLSearchParams(window.location.search);[m
[31m-    const forcedChartType = urlParams.get('chartType');[m
[31m-    if (forcedChartType) {[m
[31m-      console.log(`[DEBUG] Forcing chart type from URL parameter: "${forcedChartType}"`);[m
[31m-      return mapChartType(forcedChartType);[m
[31m-    }[m
[31m-  } catch (error) {[m
[31m-    console.error('Error checking URL parameters:', error);[m
[31m-  }[m
[31m-  [m
[31m-  // Get the mapped type[m
[31m-  const mappedType = mapChartType(type);[m
[31m-  console.log(`[DEBUG] Type "${type}" mapped to "${mappedType}"`);[m
[31m-  [m
[31m-  // List of all supported visualization types from the Visualization directory[m
[31m-  const supportedTypes = [[m
[31m-    'bar', 'line', 'pie', 'area', 'scatter', 'composed', [m
[31m-    'heatmap', 'radar', 'funnel', 'treemap', 'network', [m
[31m-    'geospatial', 'sankey', 'table'[m
[31m-  ];[m
[31m-  [m
[31m-  // Check if the mapped type is supported[m
[31m-  if (supportedTypes.includes(mappedType)) {[m
[31m-    console.log(`[DEBUG] Type "${mappedType}" is supported`);[m
[31m-    return mappedType;[m
[31m-  }[m
[31m-  [m
[31m-  // If not supported, log a warning and return a default[m
[31m-  console.warn(`[Visualization Type] Unsupported type: "${type}" (mapped to "${mappedType}"). Falling back to "bar".`);[m
[31m-  return 'bar';[m
[31m-}[m
[31m-[m
[31m-// Loading placeholder for lazy-loaded components[m
[31m-const VisualizationLoader = () => ([m
[31m-  <div className="animate-pulse rounded-lg overflow-hidden">[m
[31m-    <div className="h-64 bg-gray-200 dark:bg-gray-700"></div>[m
[31m-    <div className="h-4 mt-3 bg-gray-200 dark:bg-gray-700 w-3/4 rounded"></div>[m
[31m-    <div className="h-3 mt-2 bg-gray-200 dark:bg-gray-700 w-1/2 rounded"></div>[m
[31m-  </div>[m
[31m-);[m
[31m-[m
[31m-// Icons[m
[31m-// Step type icons imported from AnalyticalStep[m
[31m-const ChartBarIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const FilterIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const AggregateIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M7.5 14.25v2.25m3-4.5v4.5m3-6.75v6.75m3-9v9M6 20.25h12A2.25 2.25 0 0 0 20.25 18V6A2.25 2.25 0 0 0 18 3.75H6A2.25 2.25 0 0 0 3.75 6v12A2.25 2.25 0 0 0 6 20.25Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const SortIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M3 4.5h14.25M3 9h9.75M3 13.5h5.25m5.25-.75L17.25 9m0 0L21 12.75M17.25 9v12" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const GroupIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 7.125C2.25 6.504 2.754 6 3.375 6h6c.621 0 1.125.504 1.125 1.125v3.75c0 .621-.504 1.125-1.125 1.125h-6a1.125 1.125 0 0 1-1.125-1.125v-3.75ZM14.25 8.625c0-.621.504-1.125 1.125-1.125h5.25c.621 0 1.125.504 1.125 1.125v8.25c0 .621-.504 1.125-1.125 1.125h-5.25a1.125 1.125 0 0 1-1.125-1.125v-8.25ZM3.75 16.125c0-.621.504-1.125 1.125-1.125h5.25c.621 0 1.125.504 1.125 1.125v2.25c0 .621-.504 1.125-1.125 1.125h-5.25a1.125 1.125 0 0 1-1.125-1.125v-2.25Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const InsightIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 0 0 1.5-.189m-1.5.189a6.01 6.01 0 0 1-1.5-.189m3.75 7.478a12.06 12.06 0 0 1-4.5 0m3.75 2.383a14.406 14.406 0 0 1-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 1 0-7.517 0c.85.493 1.509 1.333 1.509 2.316V18" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const CompareIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M7.5 21 3 16.5m0 0L7.5 12M3 16.5h13.5m0-13.5L21 7.5m0 0L16.5 12M21 7.5H7.5" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const TableIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-export interface AnalyticalStep {[m
[31m-  id: string;[m
[31m-  type: string;[m
[31m-  description: string;[m
[31m-  order: number;[m
[31m-  data?: any;[m
[31m-  content?: string;[m
[31m-  code?: string;[m
[31m-  insights?: string[];[m
[31m-  metrics?: Array<{label: string, value: string | number}>;[m
[31m-  visualization?: {[m
[31m-    type: string;[m
[31m-    config: {[m
[31m-      data?: any[];[m
[31m-      xKey?: string;[m
[31m-      yKey?: string;[m
[31m-      series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-      labels?: { title?: string; xAxis?: string; yAxis?: string };[m
[31m-      options?: Record<string, any>;[m
[31m-    };[m
[31m-  };[m
[31m-  // Add multiple visualizations support[m
[31m-  visualizations?: Array<{[m
[31m-    id: string;[m
[31m-    type: string;[m
[31m-    title: string;[m
[31m-    description?: string;[m
[31m-    config: {[m
[31m-      data?: any[];[m
[31m-      xKey?: string;[m
[31m-      yKey?: string;[m
[31m-      series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-      labels?: { title?: string; xAxis?: string; yAxis?: string };[m
[31m-      options?: Record<string, any>;[m
[31m-    };[m
[31m-  }>;[m
[31m-  recommendations?: string[];[m
[31m-  actionableInsights?: string[];[m
[31m-}[m
[31m-[m
[31m-interface EnhancedStepByStepVisualizationProps {[m
[31m-  steps: AnalyticalStep[];[m
[31m-  autoPlay?: boolean;[m
[31m-  autoPlayDelay?: number;[m
[31m-  onComplete?: () => void;[m
[31m-  onStepChange?: (stepIndex: number) => void;[m
[31m-  initialStep?: number;[m
[31m-  dataSourceType?: string;[m
[31m-  insights?: string[];[m
[31m-  summary?: string;[m
[31m-  visualizationData?: {[m
[31m-    data: any[];[m
[31m-    type: string;[m
[31m-    xKey?: string;[m
[31m-    yKey?: string;[m
[31m-    series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-    title?: string;[m
[31m-    xAxisLabel?: string;[m
[31m-    yAxisLabel?: string;[m
[31m-    preserveType?: boolean;[m
[31m-    options?: {[m
[31m-      forceChartType?: string;[m
[31m-      isPieChart?: boolean;[m
[31m-      useDirectColorAssignment?: boolean;[m
[31m-      useMultipleColors?: boolean;[m
[31m-      [key: string]: any;[m
[31m-    };[m
[31m-  } | null;[m
[31m-  // Add support for multiple visualizations[m
[31m-  visualizationsData?: Array<{[m
[31m-    id: string;[m
[31m-    data: any[];[m
[31m-    type: string;[m
[31m-    xKey?: string;[m
[31m-    yKey?: string;[m
[31m-    series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-    title?: string;[m
[31m-    description?: string;[m
[31m-    xAxisLabel?: string;[m
[31m-    yAxisLabel?: string;[m
[31m-    preserveType?: boolean;[m
[31m-    options?: {[m
[31m-      forceChartType?: string;[m
[31m-      isPieChart?: boolean;[m
[31m-      useDirectColorAssignment?: boolean;[m
[31m-      useMultipleColors?: boolean;[m
[31m-      [key: string]: any;[m
[31m-    };[m
[31m-  }>;[m
[31m-  recommendations?: string[];[m
[31m-  actionableInsights?: string[];[m
[31m-}[m
[31m-[m
[31m-// Define a context for steps data to be used by child components[m
[31m-interface StepContextType {[m
[31m-  dataSourceType: string;[m
[31m-  steps: AnalyticalStep[];[m
[31m-}[m
[31m-[m
[31m-const StepContext = React.createContext<StepContextType | null>(null);[m
[31m-[m
[31m-// Initialize DataProcessingService[m
[31m-const dataProcessingService = new DataProcessingService();[m
[31m-[m
[31m-export const EnhancedStepByStepVisualization: React.FC<EnhancedStepByStepVisualizationProps> = ({[m
[31m-  steps: initialSteps = [],[m
[31m-  autoPlay = false,[m
[31m-  autoPlayDelay = 2000,[m
[31m-  onComplete,[m
[31m-  onStepChange,[m
[31m-  initialStep = 0,[m
[31m-  dataSourceType = 'unknown',[m
[31m-  insights = [],[m
[31m-  summary = '',[m
[31m-  visualizationData = null,[m
[31m-  visualizationsData = [][m
[31m-}) => {[m
[31m-  // State for steps[m
[31m-  const [steps, setSteps] = useState<AnalyticalStep[]>(initialSteps);[m
[31m-  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);[m
[31m-  const [isReady, setIsReady] = useState(false);[m
[31m-  const [currentStepIndex, setCurrentStepIndex] = useState(initialStep);[m
[31m-  const [recommendations, setRecommendations] = useState<string[]>([]);[m
[31m-  // Current slide for visualization[m
[31m-  const [currentSlide, setCurrentSlide] = useState(0);[m
[31m-  // Local state for visualizations data[m
[31m-  const [localVisualizationsData, setLocalVisualizationsData] = useState<any[]>([]);[m
[31m-  // Show/hide data table toggle[m
[31m-  const [showDataTable, setShowDataTable] = useState(false);[m
[31m-[m
[31m-  // Refs for tracking data to avoid duplicates[m
[31m-  const visualizationDataRef = useRef<string>('');[m
[31m-  const visualizationsDataRef = useRef<string>('');[m
[31m-[m
[31m-  // Define a normalized data source type[m
[31m-  const normalizedDataSourceType = useMemo(() => {[m
[31m-    if (!dataSourceType) return 'unknown';[m
[31m-    [m
[31m-    // Map data source types to standardized format[m
[31m-    const sourceTypeMap: Record<string, string> = {[m
[31m-      'pdf': 'pdf',[m
[31m-      'excel': 'spreadsheet',[m
[31m-      'csv': 'spreadsheet',[m
[31m-      'doc': 'document',[m
[31m-      'docx': 'document',[m
[31m-      'database': 'database',[m
[31m-      'table': 'database',[m
[31m-      'sql': 'database',[m
[31m-      'api': 'api',[m
[31m-      'rest': 'api',[m
[31m-      'qdrant': 'qdrant',[m
[31m-      'vector_db': 'qdrant',[m
[31m-      'vector-db': 'qdrant',[m
[31m-      'vectordb': 'qdrant'[m
[31m-    };[m
[31m-    [m
[31m-    const normalizedType = dataSourceType.toLowerCase().replace(/[^a-z0-9_-]/g, '');[m
[31m-    return sourceTypeMap[normalizedType] || normalizedType || 'unknown';[m
[31m-  }, [dataSourceType]);[m
[31m-  [m
[31m-  console.log('Data source type received:', JSON.stringify(dataSourceType));[m
[31m-  console.log('Normalized data source type:', JSON.stringify(normalizedDataSourceType));[m
[31m-  [m
[31m-  // Completely disable mock data generation[m
[31m-  const generateSampleData = (): any[] => {[m
[31m-    // Always return an empty array - completely disable mock data[m
[31m-    return [];[m
[31m-  };[m
[31m-  [m
[31m-  // Force disable mock data completely and make it global[m
[31m-  useEffect(() => {[m
[31m-    // No need to set showMockData since we removed it[m
[31m-    [m
[31m-    // Define global variable to disable mock data across the application[m
[31m-    try {[m
[31m-      if (typeof window !== 'undefined') {[m
[31m-        (window as any).DISABLE_MOCK_DATA = true;[m
[31m-        (window as any).SHOW_TEMPLATES_DURING_THINKING = false;[m
[31m-      }[m
[31m-    } catch (e) {[m
[31m-      console.error('Failed to set global mock data flag:', e);[m
[31m-    }[m
[31m-  }, []);[m
[31m-  [m
[31m-  // Normalize data source type for consistent handling[m
[31m-  const normalizedDataSourceType = useMemo(() => {[m
[31m-    const type = (dataSourceType || '').toLowerCase();[m
[31m-    [m
[31m-    // Enhanced data source type detection with Qdrant prioritization[m
[31m-    if (type.includes('qdrant') || type.includes('vector') || type.includes('collection')) return 'qdrant';[m
[31m-    if (type.includes('pdf') || type.includes('document')) return 'pdf';[m
[31m-    if (type.includes('csv') || type.includes('excel') || type.includes('spreadsheet')) return 'excel';[m
[31m-    if (type.includes('database') || type.includes('sql')) return 'database';[m
[31m-    if (type.includes('local-files')) return 'qdrant'; // Treat local-files as Qdrant[m
[31m-    [m
[31m-    return type || 'qdrant'; // Default to Qdrant rather than unknown[m
[31m-  }, [dataSourceType]);[m
[31m-  [m
[31m-  // Log important props for debugging[m
[31m-  useEffect(() => {[m
[31m-    console.log('EnhancedStepByStepVisualization - Props received:', {[m
[31m-      stepsCount: initialSteps.length,[m
[31m-      dataSourceType,[m
[31m-      normalizedDataSourceType,[m
[31m-      hasInsights: insights.length > 0,[m
[31m-      hasSummary: !!summary,[m
[31m-      hasVisualizationData: !!visualizationData,[m
[31m-      multipleVisualizationsCount: visualizationsData?.length || 0[m
[31m-    });[m
[31m-    [m
[31m-    // Log more detailed information about the data source type[m
[31m-    console.log(`Data source type received: "${dataSourceType}"`);[m
[31m-    console.log(`Normalized data source type: "${normalizedDataSourceType}"`);[m
[31m-    [m
[31m-    if (normalizedDataSourceType === 'unknown' || normalizedDataSourceType === '') {[m
[31m-      console.warn('Non-specific data source type detected. This may affect RAG functionality.');[m
[31m-    }[m
[31m-    [m
[31m-    // Set ready state after a short delay to ensure all data is processed[m
[31m-    // Only set ready if we have actual data to display[m
[31m-    if (initialSteps.length > 0 || summary || visualizationData || (visualizationsData && visualizationsData.length > 0)) {[m
[31m-      const hasValidData = initialSteps.some(step => [m
[31m-        step.content || [m
[31m-        (step.visualization && step.visualization.config && step.visualization.config.data) ||[m
[31m-        (step.visualizations && step.visualizations.length > 0)[m
[31m-      );[m
[31m-      [m
[31m-      if (hasValidData || summary || visualizationData || (visualizationsData && visualizationsData.length > 0)) {[m
[31m-        // Set ready state after a short delay to ensure all data is processed[m
[31m-        const timer = setTimeout(() => {[m
[31m-          setIsReady(true);[m
[31m-        }, 100);[m
[31m-        return () => clearTimeout(timer);[m
[31m-      }[m
[31m-    }[m
[31m-  }, [initialSteps, dataSourceType, normalizedDataSourceType, insights, summary, visualizationData, visualizationsData]);[m
[31m-  [m
[31m-  // Create context value for steps[m
[31m-  const contextValue = useMemo<StepContextType>(() => ({[m
[31m-    dataSourceType: normalizedDataSourceType,[m
[31m-    steps[m
[31m-  }), [normalizedDataSourceType, steps]);[m
[31m-  [m
[31m-  // Add ref to track previous visualization data[m
[31m-  const visualizationDataRef = useRef<string | null>(null);[m
[31m-  [m
[31m-  // Track multiple visualizations[m
[31m-  const visualizationsDataRef = useRef<string | null>(null);[m
[31m-  [m
[31m-  // Add local state for visualizations data[m
[31m-  const [localVisualizationsData, setLocalVisualizationsData] = useState<any[]>([]);[m
[31m-  [m
[31m-  // Add current slide state for visualization navigation[m
[31m-  const [currentSlide, setCurrentSlide] = useState(0);[m
[31m-  const [showDataTable, setShowDataTable] = useState(false);[m
[31m-  [m
[31m-  // Update steps when initialSteps changes[m
[31m-  useEffect(() => {[m
[31m-    setSteps(initialSteps);[m
[31m-  }, [initialSteps]);[m
[31m-  [m
[31m-  // Create default steps if none are provided but summary is available[m
[31m-  useEffect(() => {[m
[31m-    if (initialSteps.length === 0 && summary && summary.length > 0) {[m
[31m-      console.log('Creating default step from summary content');[m
[31m-      [m
[31m-      // Create a simple default step without mock data[m
[31m-      const defaultSteps = [{[m
[31m-        id: 'default-step',[m
[31m-        type: 'info',[m
[31m-        description: 'Search Results',[m
[31m-        order: 1,[m
[31m-        content: summary,[m
[31m-        // Use empty data array - no mock data[m
[31m-        data: [][m
[31m-      }];[m
[31m-      [m
[31m-      setSteps(defaultSteps);[m
[31m-    }[m
[31m-  }, [initialSteps, summary]);[m
[31m-  [m
[31m-  // Add all visualizations from visualizationsData if provided[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationsData && [m
[31m-        visualizationsData.length > 0 && [m
[31m-        visualizationsData.every(viz => viz.data && Array.isArray(viz.data) && viz.data.length > 0)) {[m
[31m-      [m
[31m-      // Check if this visualization data already exists in steps[m
[31m-      const dataString = JSON.stringify(visualizationsData);[m
[31m-      const prevDataString = visualizationsDataRef.current;[m
[31m-      [m
[31m-      // Only add new steps if the data has changed[m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationsDataRef.current = dataString;[m
[31m-        [m
[31m-        // Create new steps for each visualization[m
[31m-        const newSteps = visualizationsData.map((vizData, index) => {[m
[31m-          // Generate meaningful insights based on the data[m
[31m-          const dataInsights = generateInsightsFromData([m
[31m-            vizData.data, [m
[31m-            vizData.type,[m
[31m-            vizData.xKey,[m
[31m-            vizData.yKey[m
[31m-          );[m
[31m-          [m
[31m-          // Respect the requested chart type[m
[31m-          const chartType = vizData.options?.forceChartType || [m
[31m-                           vizData.type || [m
[31m-                           (vizData.options?.isPieChart ? 'pie' : 'bar');[m
[31m-                           [m
[31m-          return {[m
[31m-            id: `viz-${vizData.id || Date.now() + index}`,[m
[31m-            type: 'visualization',[m
[31m-            description: vizData.description || `${vizData.type.charAt(0).toUpperCase() + vizData.type.slice(1)} Analysis`,[m
[31m-            order: steps.length + index + 1,[m
[31m-            content: `## ${vizData.title || 'Data Analysis'}\n\n` +[m
[31m-                    `${vizData.description || 'This visualization shows patterns in the data.'}\n\n` +[m
[31m-                    '```json\n' + [m
[31m-                    JSON.stringify(vizData.data, null, 2) + [m
[31m-                    '\n```',[m
[31m-            insights: dataInsights,[m
[31m-            metrics: generateMetricsFromData(vizData.data),[m
[31m-            visualization: {[m
[31m-              type: chartType,[m
[31m-              config: {[m
[31m-                data: vizData.data,[m
[31m-                xKey: vizData.xKey || (vizData.data[0] ? Object.keys(vizData.data[0])[0] : undefined),[m
[31m-                yKey: vizData.yKey || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : undefined),[m
[31m-                series: vizData.series || [[m
[31m-                  {[m
[31m-                    dataKey: vizData.yKey || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : 'value'),[m
[31m-                    name: vizData.yAxisLabel || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : 'Value')[m
[31m-                  }[m
[31m-                ],[m
[31m-                labels: {[m
[31m-                  title: vizData.title || 'Data Analysis',[m
[31m-                  xAxis: vizData.xAxisLabel || (vizData.data[0] ? Object.keys(vizData.data[0])[0] : 'Category'),[m
[31m-                  yAxis: vizData.yAxisLabel || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : 'Value')[m
[31m-                },[m
[31m-                options: {[m
[31m-                  useDirectColorAssignment: true,[m
[31m-                  useMultipleColors: true,[m
[31m-                  theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-                  ...vizData.options[m
[31m-                }[m
[31m-              }[m
[31m-            }[m
[31m-          };[m
[31m-        });[m
[31m-        [m
[31m-        // Add the new steps to existing steps[m
[31m-        setSteps(prevSteps => [...prevSteps, ...newSteps]);[m
[31m-        [m
[31m-        // Auto-expand the new steps[m
[31m-        for (const step of newSteps) {[m
[31m-          setExpandedSteps(prev => [...prev, step.id]);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationsData, steps]);[m
[31m-  [m
[31m-  // Add visualization step if visualizationData is provided[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationData && [m
[31m-        visualizationData.data && [m
[31m-        Array.isArray(visualizationData.data) && [m
[31m-        visualizationData.data.length > 0 && [m
[31m-        visualizationData.type) {[m
[31m-      [m
[31m-      // Check if this visualization data already exists in steps[m
[31m-      const dataString = JSON.stringify(visualizationData.data);[m
[31m-      const prevDataString = visualizationDataRef.current;[m
[31m-      [m
[31m-      // Only add a new step if the data has changed[m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationDataRef.current = dataString;[m
[31m-        [m
[31m-        // Check if the step already exists[m
[31m-        const existingStep = steps.find(step => [m
[31m-          step.visualization && [m
[31m-          JSON.stringify(step.visualization.config.data) === dataString[m
[31m-        );[m
[31m-        [m
[31m-        if (!existingStep) {[m
[31m-          // Generate meaningful insights from the data[m
[31m-          const dataInsights = generateInsightsFromData([m
[31m-            visualizationData.data, [m
[31m-            visualizationData.type,[m
[31m-            visualizationData.xKey,[m
[31m-            visualizationData.yKey[m
[31m-          );[m
[31m-          [m
[31m-          // Respect the requested chart type[m
[31m-          const chartType = visualizationData.options?.forceChartType || [m
[31m-                           visualizationData.type || [m
[31m-                           (visualizationData.options?.isPieChart ? 'pie' : 'bar');[m
[31m-          [m
[31m-          // Create a new step with proper visualization[m
[31m-          const newStep: AnalyticalStep = {[m
[31m-            id: `viz-${Date.now()}`,[m
[31m-            type: 'visualization',[m
[31m-            description: `Data Analysis for ${visualizationData.title || 'Dataset'}`,[m
[31m-            order: steps.length + 1,[m
[31m-            content: `## ${visualizationData.title || 'Data Analysis'}\n\n` +[m
[31m-                    `This visualization reveals patterns and insights in the data.\n\n` +[m
[31m-                    '```json\n' + [m
[31m-                    JSON.stringify(visualizationData.data, null, 2) + [m
[31m-                    '\n```',[m
[31m-            insights: dataInsights,[m
[31m-            metrics: generateMetricsFromData(visualizationData.data),[m
[31m-            visualization: {[m
[31m-              type: chartType,[m
[31m-              config: {[m
[31m-                data: visualizationData.data,[m
[31m-                xKey: visualizationData.xKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : undefined),[m
[31m-                yKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : undefined),[m
[31m-                series: visualizationData.series || [[m
[31m-                  {[m
[31m-                    dataKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'value'),[m
[31m-                    name: visualizationData.title || 'Value'[m
[31m-                  }[m
[31m-                ],[m
[31m-                labels: {[m
[31m-                  title: visualizationData.title || `Data Analysis`,[m
[31m-                  xAxis: visualizationData.xAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : 'Category'),[m
[31m-                  yAxis: visualizationData.yAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'Value')[m
[31m-                },[m
[31m-                options: {[m
[31m-                  useDirectColorAssignment: true,[m
[31m-                  useMultipleColors: true,[m
[31m-                  theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-                  ...visualizationData.options[m
[31m-                }[m
[31m-              }[m
[31m-            }[m
[31m-          };[m
[31m-          [m
[31m-          // Add the new step to the steps array[m
[31m-          setSteps(prevSteps => [...prevSteps, newStep]);[m
[31m-          [m
[31m-          // Auto-expand the new step[m
[31m-          setExpandedSteps(prev => [...prev, newStep.id]);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationData, steps]);[m
[31m-  [m
[31m-  // Handle auto-advancing with useEffect[m
[31m-  useEffect(() => {[m
[31m-    // Only continue if autoplay is enabled and we're not at the end[m
[31m-    if (autoPlay && currentStepIndex < steps.length - 1) {[m
[31m-      const timer = setTimeout(() => {[m
[31m-        setCurrentStepIndex(prev => prev + 1);[m
[31m-      }, autoPlayDelay);[m
[31m-      [m
[31m-      return () => clearTimeout(timer);[m
[31m-    }[m
[31m-    [m
[31m-    // If we've reached the end, call onComplete[m
[31m-    if (currentStepIndex === steps.length - 1) {[m
[31m-      if (onComplete) {[m
[31m-        onComplete();[m
[31m-      }[m
[31m-    }[m
[31m-    [m
[31m-    // Notify about step change[m
[31m-    if (onStepChange) {[m
[31m-      onStepChange(currentStepIndex);[m
[31m-    }[m
[31m-  }, [currentStepIndex, steps.length, autoPlay, autoPlayDelay, onComplete, onStepChange]);[m
[31m-  [m
[31m-  // Toggle step expansion[m
[31m-  const toggleStepExpand = (stepId: string) => {[m
[31m-    setExpandedSteps(prev => [m
[31m-      prev.includes(stepId) [m
[31m-        ? prev.filter(id => id !== stepId) [m
[31m-        : [...prev, stepId][m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  // Helper function to safely render cell values[m
[31m-  const renderCellValue = (value: any): string => {[m
[31m-    if (value === null || value === undefined) return '';[m
[31m-    if (typeof value === 'object') return JSON.stringify(value);[m
[31m-    return String(value);[m
[31m-  };[m
[31m-  [m
[31m-  // Generate insights from data[m
[31m-  const generateMetricsFromData = (data: any[]): Array<{label: string, value: string | number}> => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const metrics: Array<{label: string, value: string | number}> = [];[m
[31m-    try {[m
[31m-      // Basic metrics[m
[31m-      metrics.push({ label: 'Total Records', value: data.length });[m
[31m-      [m
[31m-      // If we have numerical data, calculate statistics[m
[31m-      const numericKeys = Object.keys(data[0]).filter(key => {[m
[31m-        return !isNaN(parseFloat(data[0][key]));[m
[31m-      });[m
[31m-      [m
[31m-      if (numericKeys.length > 0) {[m
[31m-        const key = numericKeys[0]; // Use first numeric key for statistics[m
[31m-        [m
[31m-        // Calculate sum, average, max, min[m
[31m-        const values = data.map(item => parseFloat(item[key])).filter(val => !isNaN(val));[m
[31m-        if (values.length > 0) {[m
[31m-          const sum = values.reduce((a, b) => a + b, 0);[m
[31m-          const avg = sum / values.length;[m
[31m-          const max = Math.max(...values);[m
[31m-          const min = Math.min(...values);[m
[31m-          [m
[31m-          metrics.push({ label: 'Total Sum', value: sum.toFixed(2) });[m
[31m-          metrics.push({ label: 'Average', value: avg.toFixed(2) });[m
[31m-          metrics.push({ label: 'Maximum', value: max });[m
[31m-          metrics.push({ label: 'Minimum', value: min });[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // Add data source specific metrics[m
[31m-      if (data[0].type) {[m
[31m-        // Count by type if available[m
[31m-        const typeCounts: Record<string, number> = {};[m
[31m-        data.forEach(item => {[m
[31m-          typeCounts[item.type] = (typeCounts[item.type] || 0) + 1;[m
[31m-        });[m
[31m-        [m
[31m-        const primaryType = Object.entries(typeCounts)[m
[31m-          .sort((a, b) => b[1] - a[1])[m
[31m-          .map(([type, count]) => ({ type, count }))[0];[m
[31m-          [m
[31m-        if (primaryType) {[m
[31m-          metrics.push({ [m
[31m-            label: 'Primary Type', [m
[31m-            value: `${primaryType.type} (${primaryType.count})` [m
[31m-          });[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating metrics:', error);[m
[31m-    }[m
[31m-    [m
[31m-    return metrics;[m
[31m-  };[m
[31m-  [m
[31m-  // Add visualization to dashboard[m
[31m-  const handleAddToDashboard = useCallback(async (visualization: any, vizId: string) => {[m
[31m-    if (!visualization || !normalizedDataSourceType) return;[m
[31m-[m
[31m-    try {[m
[31m-      console.log('Visualization data being sent to dashboard:', JSON.stringify(visualization, null, 2));[m
[31m-      [m
[31m-      // Set the current visualization as being added to dashboard[m
[31m-      setAddingToDashboard(vizId);[m
[31m-      [m
[31m-      // Create instance and call addToDashboard method[m
[31m-      const dataProcessingService = DataProcessingService.getInstance();[m
[31m-      const success = await dataProcessingService.addToDashboard(visualization);[m
[31m-      [m
[31m-      if (success) {[m
[31m-        showNotification({[m
[31m-          type: 'success',[m
[31m-          message: 'Visualization added to dashboard!'[m
[31m-        });[m
[31m-      } else {[m
[31m-        showNotification({[m
[31m-          type: 'error',[m
[31m-          message: 'Failed to add visualization to dashboard'[m
[31m-        });[m
[31m-      }[m
[31m-      [m
[31m-      // Clear the adding state[m
[31m-      setAddingToDashboard(null);[m
[31m-    } catch (error) {[m
[31m-      console.error('Error adding to dashboard:', error);[m
[31m-      showNotification({[m
[31m-        type: 'error',[m
[31m-        message: 'An error occurred while adding to dashboard'[m
[31m-      });[m
[31m-      [m
[31m-      // Clear the adding state on error[m
[31m-      setAddingToDashboard(null);[m
[31m-    }[m
[31m-  }, [normalizedDataSourceType, showNotification]);[m
[31m-  [m
[31m-  // Get appropriate icon for step type[m
[31m-  const getStepIcon = (type: string) => {[m
[31m-    switch (type.toLowerCase()) {[m
[31m-      case 'filtering':[m
[31m-        return <FilterIcon />;[m
[31m-      case 'aggregation':[m
[31m-        return <AggregateIcon />;[m
[31m-      case 'grouping':[m
[31m-        return <GroupIcon />;[m
[31m-      case 'sorting':[m
[31m-        return <SortIcon />;[m
[31m-      case 'visualization':[m
[31m-        return <ChartBarIcon />;[m
[31m-      case 'comparative':[m
[31m-        return <CompareIcon />;[m
[31m-      case 'insights':[m
[31m-        return <InsightIcon />;[m
[31m-      case 'table':[m
[31m-        return <TableIcon />;[m
[31m-      default:[m
[31m-        return <TableIcon />;[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Get background color based on step type[m
[31m-  const getStepBgColor = (type: string) => {[m
[31m-    switch (type.toLowerCase()) {[m
[31m-      case 'filtering':[m
[31m-        return 'border-blue-300 bg-blue-50 dark:border-blue-700 dark:bg-blue-900/30';[m
[31m-      case 'aggregation':[m
[31m-        return 'border-indigo-300 bg-indigo-50 dark:border-indigo-700 dark:bg-indigo-900/30';[m
[31m-      case 'grouping':[m
[31m-        return 'border-purple-300 bg-purple-50 dark:border-purple-700 dark:bg-purple-900/30';[m
[31m-      case 'sorting':[m
[31m-        return 'border-green-300 bg-green-50 dark:border-green-700 dark:bg-green-900/30';[m
[31m-      case 'visualization':[m
[31m-        return 'border-yellow-300 bg-yellow-50 dark:border-yellow-700 dark:bg-yellow-900/30';[m
[31m-      case 'comparative':[m
[31m-        return 'border-orange-300 bg-orange-50 dark:border-orange-700 dark:bg-orange-900/30';[m
[31m-      case 'insights':[m
[31m-        return 'border-pink-300 bg-pink-50 dark:border-pink-700 dark:bg-pink-900/30';[m
[31m-      case 'table':[m
[31m-        return 'border-gray-300 bg-gray-50 dark:border-gray-700 dark:bg-gray-800';[m
[31m-      default:[m
[31m-        return 'border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800';[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Enhanced function to extract and process step data from Qdrant[m
[31m-  const processStepData = (step: AnalyticalStep) => {[m
[31m-    if (!step.data && !step.content) {[m
[31m-      return { hasData: false, tableData: null as any[] | null, processed: step.content || '', tables: [] };[m
[31m-    }[m
[31m-    [m
[31m-    try {[m
[31m-      // Initialize an array to store extracted tables[m
[31m-      const tables: Array<{title: string, data: any[], content: string}> = [];[m
[31m-      [m
[31m-      // Get the processed content (use content if available, otherwise use description)[m
[31m-      let processed = step.content || step.description || '';[m
[31m-      [m
[31m-      // Check if content has actual table data structures (arrays of objects)[m
[31m-      let tableData: any[] | null = null;[m
[31m-      [m
[31m-      // Handle data directly from Qdrant if available[m
[31m-      if (step.data) {[m
[31m-        // If data is a string, try to parse it as JSON[m
[31m-        if (typeof step.data === 'string') {[m
[31m-          try {[m
[31m-            const parsedData = JSON.parse(step.data);[m
[31m-            if (Array.isArray(parsedData) && parsedData.length > 0) {[m
[31m-              tableData = parsedData;[m
[31m-            }[m
[31m-          } catch (e) {[m
[31m-            console.log('Data is not valid JSON, using as text', step.data);[m
[31m-            // If it's not valid JSON, append it to the processed content[m
[31m-            processed += '\n\n' + step.data;[m
[31m-          }[m
[31m-        } [m
[31m-        // If data is an array, use it directly[m
[31m-        else if (Array.isArray(step.data)) {[m
[31m-          tableData = step.data;[m
[31m-        } [m
[31m-        // If data is an object, convert to array with single item[m
[31m-        else if (typeof step.data === 'object' && step.data !== null) {[m
[31m-          tableData = [step.data];[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // Search for markdown tables in the content[m
[31m-      const markdownTables = TableFormatter.extractTablesFromMarkdown(processed);[m
[31m-      if (markdownTables && markdownTables.length > 0) {[m
[31m-        // If we found markdown tables and don't already have tableData, use the first one[m
[31m-        if (!tableData && markdownTables[0].length > 0) {[m
[31m-          tableData = markdownTables[0];[m
[31m-        }[m
[31m-        [m
[31m-        // Add all markdown tables to our tables array[m
[31m-        markdownTables.forEach((tableRows, index) => {[m
[31m-          if (tableRows.length > 0) {[m
[31m-            tables.push({[m
[31m-              title: `Table ${index + 1}`,[m
[31m-              data: tableRows,[m
[31m-              content: TableFormatter.toMarkdownTable(tableRows)[m
[31m-            });[m
[31m-          }[m
[31m-        });[m
[31m-      }[m
[31m-      [m
[31m-      return { [m
[31m-        hasData: tableData !== null || tables.length > 0, [m
[31m-        tableData, [m
[31m-        processed, [m
[31m-        tables [m
[31m-      };[m
[31m-    } catch (e) {[m
[31m-      console.error('Error processing step data:', e);[m
[31m-      return { [m
[31m-        hasData: false, [m
[31m-        tableData: null, [m
[31m-        processed: step.content || step.description || '', [m
[31m-        tables: [] [m
[31m-      };[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Enhance the renderStep function to properly display tables[m
[31m-  // @ts-ignore - This function is currently unused but kept for future use[m
[31m-  // eslint-disable-next-line @typescript-eslint/no-unused-vars[m
[31m-  const renderStep = useCallback((step: AnalyticalStep, index: number) => {[m
[31m-    const isExpanded = expandedSteps.includes(step.id);[m
[31m-    const stepIcon = getStepIcon(step.type);[m
[31m-    const stepBgColor = getStepBgColor(step.type);[m
[31m-    [m
[31m-    // Process the step data to extract tables and format content[m
[31m-    const { processed } = processStepData(step);[m
[31m-    [m
[31m-    // Format the step type to lowercase for display[m
[31m-    const displayType = step.type.toLowerCase();[m
[31m-    [m
[31m-    // Clean up the description text by removing all numbering, markdown, and type prefixes[m
[31m-    let cleanDescription = step.description[m
[31m-      .replace(/^\d+\.\s*/, '') // Remove leading numbers like "1. "[m
[31m-      .replace(/^\d+\.\s*\d+\.\s*/, '') // Remove double numbering like "1. 1. "[m
[31m-      .replace(/\*\*([^*]+)\*\*:?\s*/g, '') // Remove markdown bold patterns with colon like "**AGGREGATION:** "[m
[31m-      .replace(new RegExp(`^${step.type}:\\s*`, 'i'), '') // Remove type prefix like "TYPE: " (case insensitive)[m
[31m-      .replace(new RegExp(`^${displayType}:\\s*`, 'i'), '') // Remove lowercase type prefix[m
[31m-      .replace(new RegExp(`^${displayType.toUpperCase()}:\\s*`, 'i'), '') // Remove uppercase type[m
[31m-      .trim();[m
[31m-    [m
[31m-    // Remove any duplicate content between type and description[m
[31m-    if (cleanDescription.startsWith('First, I reviewed')) {[m
[31m-      // If it starts with a common pattern, ensure it's only shown once[m
[31m-      cleanDescription = cleanDescription.replace(/^\d+\.\s*/, ''); // Remove any remaining numbers[m
[31m-    }[m
[31m-    [m
[31m-    // Extract the original text from the processed content for the results section[m
[31m-    const originalText = processed || step.description;[m
[31m-    [m
[31m-    return ([m
[31m-      <motion.div [m
[31m-        key={step.id}[m
[31m-        initial={{ opacity: 0, y: 10 }}[m
[31m-        animate={{ opacity: 1, y: 0 }}[m
[31m-        transition={{ duration: 0.3, ease: "easeOut" }}[m
[31m-        className={`mb-6 border rounded-xl overflow-hidden bg-white dark:bg-gray-800/50 shadow-sm[m
[31m-                   ${isExpanded ? 'transition-all duration-500 ease-in-out' : 'hover:shadow-md transition-all'}`}[m
[31m-      >[m
[31m-        <div [m
[31m-          className="px-5 py-4 flex justify-between items-center cursor-pointer"[m
[31m-          onClick={() => toggleStepExpand(step.id)}[m
[31m-        >[m
[31m-          <div className="flex items-center space-x-3">[m
[31m-            <div className={`p-2 rounded-lg ${stepBgColor} text-white flex items-center justify-center`}>[m
[31m-              {stepIcon}[m
[31m-            </div>[m
[31m-            <div>[m
[31m-              <div className="font-medium text-gray-900 dark:text-white">[m
[31m-                <span className="text-lg font-bold">{index + 1}.</span> <span className="text-purple-600 dark:text-purple-400 font-medium">{displayType}:</span> {cleanDescription}[m
[31m-              </div>[m
[31m-              {!isExpanded && ([m
[31m-                <div className="text-xs text-gray-500 dark:text-gray-400 max-w-[500px] truncate">[m
[31m-                  {processed?.substring(0, 100)}[m
[31m-                  {processed && processed.length > 100 ? '...' : ''}[m
[31m-                </div>[m
[31m-              )}[m
[31m-            </div>[m
[31m-          </div>[m
[31m-          <div>[m
[31m-            <button[m
[31m-              className="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"[m
[31m-              onClick={(e) => {[m
[31m-                e.stopPropagation();[m
[31m-                toggleStepExpand(step.id);[m
[31m-              }}[m
[31m-            >[m
[31m-              {isExpanded ? ([m
[31m-                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">[m
[31m-                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />[m
[31m-                </svg>[m
[31m-              ) : ([m
[31m-                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">[m
[31m-                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />[m
[31m-                </svg>[m
[31m-              )}[m
[31m-            </button>[m
[31m-          </div>[m
[31m-        </div>[m
[31m-        [m
[31m-        {isExpanded && ([m
[31m-          <div className="px-5 pb-5 pt-3">[m
[31m-            <div>[m
[31m-              <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700 p-4">[m
[31m-                <h3 className="text-md font-medium mb-3 text-gray-800 dark:text-gray-200">Analysis Details</h3>[m
[31m-                [m
[31m-                <p className="mb-4 text-sm text-gray-700 dark:text-gray-300">[m
[31m-                  This {displayType} analysis examines relationships and patterns in the data to extract meaningful business insights.[m
[31m-                </p>[m
[31m-                [m
[31m-                <div className="bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg border border-purple-100 dark:border-purple-800 mb-4">[m
[31m-                  <p className="text-sm text-purple-700 dark:text-purple-300">[m
[31m-                    <span className="font-medium">{displayType} Results:</span> {index + 1}. {originalText.includes("**") ? originalText : `**${step.type.toUpperCase()}:** ${cleanDescription}`}[m
[31m-                  </p>[m
[31m-                </div>[m
[31m-                [m
[31m-                <div className="mt-4">[m
[31m-                  <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Data Preview</h4>[m
[31m-                  <div className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">[m
[31m-                    <TableVisualization [m
[31m-                      data={step.data && Array.isArray(step.data) && step.data.length > 0 ? step.data : generateSampleData()}[m
[31m-                      title=""[m
[31m-                      maxHeight="250px"[m
[31m-                      pagination={false}[m
[31m-                      pageSize={5}[m
[31m-                      responsive={true}[m
[31m-                      className="w-full"[m
[31m-                      style={{ fontSize: '0.875rem' }}[m
[31m-                    />[m
[31m-                  </div>[m
[31m-                </div>[m
[31m-              </div>[m
[31m-            </div>[m
[31m-          </div>[m
[31m-        )}[m
[31m-      </motion.div>[m
[31m-    );[m
[31m-  }, [expandedSteps, toggleStepExpand, getStepIcon, getStepBgColor, handleAddToDashboard]);[m
[31m-  [m
[31m-  // New function to render a visualization with proper chart type handling[m
[31m-  const renderVisualization = (vizConfig: any, height = 400) => {[m
[31m-    // Get the requested chart type from the configuration[m
[31m-    const requestedType = vizConfig.type || 'bar';[m
[31m-    [m
[31m-    // Check URL for forced chart type[m
[31m-    let finalChartType = requestedType;[m
[31m-    try {[m
[31m-      const urlParams = new URLSearchParams(window.location.search);[m
[31m-      const forcedChartType = urlParams.get('chartType');[m
[31m-      if (forcedChartType) {[m
[31m-        console.log(`[Visualization] Overriding chart type with URL parameter: ${forcedChartType}`);[m
[31m-        finalChartType = forcedChartType;[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error checking URL parameters:', error);[m
[31m-    }[m
[31m-    [m
[31m-    // Respect specific options if provided[m
[31m-    if (vizConfig.options?.forceChartType) {[m
[31m-      finalChartType = vizConfig.options.forceChartType;[m
[31m-      console.log(`[Visualization] Using forced chart type from options: ${finalChartType}`);[m
[31m-    }[m
[31m-    [m
[31m-    // Apply the validated chart type[m
[31m-    const validatedType = validateVisualizationType(finalChartType);[m
[31m-    console.log(`[Visualization] Final chart type: ${validatedType} (requested: ${requestedType})`);[m
[31m-    [m
[31m-    // Define normalized chart types mapping[m
[31m-    const chartTypeMap: Record<string, string> = {[m
[31m-      'bar': 'bar',[m
[31m-      'column': 'bar',[m
[31m-      'stacked-bar': 'stackedBar',[m
[31m-      'stacked_bar': 'stackedBar',[m
[31m-      'horizontal-bar': 'horizontalBar',[m
[31m-      'horizontal_bar': 'horizontalBar',[m
[31m-      'line': 'line',[m
[31m-      'area': 'area',[m
[31m-      'enhanced-area': 'enhancedArea',[m
[31m-      'enhanced_area': 'enhancedArea',[m
[31m-      'pie': 'pie',[m
[31m-      'donut': 'donut',[m
[31m-      'doughnut': 'donut',[m
[31m-      'scatter': 'scatter',[m
[31m-      'radar': 'radar',[m
[31m-      'heatmap': 'heatmap',[m
[31m-      'funnel': 'funnel',[m
[31m-      'treemap': 'treemap',[m
[31m-      'sankey': 'sankey',[m
[31m-      'geospatial': 'geospatial',[m
[31m-      'network': 'network',[m
[31m-      'graph': 'network'[m
[31m-    };[m
[31m-    [m
[31m-    // Normalize the validated type[m
[31m-    const normalizedType = chartTypeMap[validatedType.toLowerCase()] || 'bar';[m
[31m-    [m
[31m-    // Create the visualization config with the correct chart type[m
[31m-    const config = {[m
[31m-      ...vizConfig,[m
[31m-      type: normalizedType,[m
[31m-      options: {[m
[31m-        ...(vizConfig.options || {}),[m
[31m-        theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-        // Add appropriate options based on chart type[m
[31m-        ...(normalizedType === 'pie' || normalizedType === 'donut' ? {[m
[31m-          isPieChart: true,[m
[31m-          useDirectColorAssignment: true,[m
[31m-          useMultipleColors: true[m
[31m-        } : {})[m
[31m-      }[m
[31m-    };[m
[31m-    [m
[31m-    // Generate insights specifically for this visualization[m
[31m-    const vizInsights = vizConfig.data && Array.isArray(vizConfig.data) && vizConfig.data.length > 0 [m
[31m-      ? generateInsightsFromData(vizConfig.data, normalizedType, vizConfig.xKey, vizConfig.yKey).slice(0, 3)[m
[31m-      : [];[m
[31m-    [m
[31m-    // Use the ImportedVisualization component from the main Visualization module[m
[31m-    // This allows us to leverage the full range of chart types supported by the app[m
[31m-    return ([m
[31m-      <div className="slide-visualization">[m
[31m-        {/* Key insights at the top of the visualization */}[m
[31m-        {vizInsights.length > 0 && ([m
[31m-          <div className="key-insights-panel mb-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-100 dark:border-blue-800/30">[m
[31m-            <h5 className="text-sm font-medium text-blue-800 dark:text-blue-300 mb-2 flex items-center">[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4 mr-1">[m
[31m-                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />[m
[31m-                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />[m
[31m-              </svg>[m
[31m-              Key Insights[m
[31m-            </h5>[m
[31m-            <ul className="space-y-1.5">[m
[31m-              {vizInsights.map((insight, idx) => ([m
[31m-                <li key={idx} className="flex items-start text-sm text-blue-700 dark:text-blue-200">[m
[31m-                  <span className="text-blue-500 dark:text-blue-400 mr-2 mt-0.5 font-bold">â€¢</span>[m
[31m-                  <span>{insight}</span>[m
[31m-                </li>[m
[31m-              ))}[m
[31m-            </ul>[m
[31m-          </div>[m
[31m-        )}[m
[31m-        [m
[31m-        {/* Chart visualization */}[m
[31m-        <div className="chart-container relative" style={{ height }}>[m
[31m-          <Suspense fallback={<VisualizationLoader />}>[m
[31m-            <LazyVisualizationWrapper[m
[31m-              config={config}[m
[31m-              height={height}[m
[31m-              width="100%"[m
[31m-              theme={document.documentElement.classList.contains('dark') ? 'dark' : 'light'}[m
[31m-            />[m
[31m-          </Suspense>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  // Generate domain-specific insights based on data type[m
[31m-  const generateDomainSpecificInsights = (data: any[], dataType: string): string[] => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const insights: string[] = [];[m
[31m-    [m
[31m-    try {[m
[31m-      if (dataType === 'sales') {[m
[31m-        // Sales-specific insights[m
[31m-        insights.push(`Sales data analysis reveals patterns in performance across different segments and time periods.`);[m
[31m-        insights.push(`Consider analyzing year-over-year growth rates to identify long-term trends and seasonality effects.`);[m
[31m-        insights.push(`Examining regional distribution of sales could reveal untapped market opportunities.`);[m
[31m-      } else if (dataType === 'financial') {[m
[31m-        // Financial insights[m
[31m-        insights.push(`Financial data analysis can help identify cost-saving opportunities and revenue growth patterns.`);[m
[31m-        insights.push(`Quarter-over-quarter comparisons could highlight seasonal trends and annual growth patterns.`);[m
[31m-        insights.push(`Expense-to-revenue ratios may reveal operational efficiency opportunities.`);[m
[31m-      } else {[m
[31m-        // General insights[m
[31m-        insights.push(`Analysis of data patterns shows distribution characteristics worth exploring further.`);[m
[31m-        insights.push(`Consider segmenting this data to identify any hidden correlation patterns.`);[m
[31m-        insights.push(`Regular trend analysis could help identify seasonal or periodic variations.`);[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating domain-specific insights:', error);[m
[31m-    }[m
[31m-    [m
[31m-    return insights;[m
[31m-  };[m
[31m-  [m
[31m-  // Generate more meaningful insights from data[m
[31m-  const generateInsightsFromData = (data: any[], type: string, xKey?: string, yKey?: string): string[] => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const insights: string[] = [];[m
[31m-    try {[m
[31m-      // Use xKey and yKey if provided, otherwise use first two keys[m
[31m-      const actualXKey = xKey || Object.keys(data[0])[0];[m
[31m-      const actualYKey = yKey || Object.keys(data[0])[1];[m
[31m-      [m
[31m-      // Find max and min values[m
[31m-      const values = data.map(item => parseFloat(item[actualYKey])).filter(val => !isNaN(val));[m
[31m-      if (values.length > 0) {[m
[31m-        const maxValue = Math.max(...values);[m
[31m-        const minValue = Math.min(...values);[m
[31m-        const maxItem = data.find(item => parseFloat(item[actualYKey]) === maxValue);[m
[31m-        const minItem = data.find(item => parseFloat(item[actualYKey]) === minValue);[m
[31m-        const sum = values.reduce((a, b) => a + b, 0);[m
[31m-        const avg = sum / values.length;[m
[31m-        [m
[31m-        // Calculate standard deviation to measure variability[m
[31m-        const variance = values.reduce((v, value) => v + Math.pow(value - avg, 2), 0) / values.length;[m
[31m-        const stdDev = Math.sqrt(variance);[m
[31m-        const relativeStdDev = (stdDev / avg) * 100; // CV - coefficient of variation[m
[31m-        [m
[31m-        // Detailed insights about the data values[m
[31m-        if (maxItem) {[m
[31m-          insights.push(`The highest ${actualYKey} is ${maxValue.toFixed(2)} for ${maxItem[actualXKey]}, representing ${((maxValue / sum) * 100).toFixed(1)}% of the total.`);[m
[31m-        }[m
[31m-        [m
[31m-        if (minItem) {[m
[31m-          insights.push(`The lowest ${actualYKey} is ${minValue.toFixed(2)} for ${minItem[actualXKey]}, representing ${((minValue / sum) * 100).toFixed(1)}% of the total.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Median analysis for distribution insights[m
[31m-        const sortedValues = [...values].sort((a, b) => a - b);[m
[31m-        const midIndex = Math.floor(sortedValues.length / 2);[m
[31m-        const median = sortedValues.length % 2 === 0 [m
[31m-          ? (sortedValues[midIndex - 1] + sortedValues[midIndex]) / 2 [m
[31m-          : sortedValues[midIndex];[m
[31m-        [m
[31m-        // Compare mean and median for distribution analysis[m
[31m-        const meanMedianDiff = ((avg - median) / avg) * 100;[m
[31m-        [m
[31m-        // Distribution insights based on standard deviation and mean-median comparison[m
[31m-        if (Math.abs(meanMedianDiff) > 20) {[m
[31m-          insights.push(`The distribution is skewed (mean: ${avg.toFixed(2)}, median: ${median.toFixed(2)}), suggesting outliers are affecting the average.`);[m
[31m-        } else if (relativeStdDev > 50) {[m
[31m-          insights.push(`The data shows high variability with a coefficient of variation of ${relativeStdDev.toFixed(1)}%, indicating diverse values.`);[m
[31m-        } else if (relativeStdDev < 10) {[m
[31m-          insights.push(`The data shows low variability with a coefficient of variation of ${relativeStdDev.toFixed(1)}%, indicating consistent values.`);[m
[31m-        } else {[m
[31m-          insights.push(`The data shows moderate variability with a coefficient of variation of ${relativeStdDev.toFixed(1)}%.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Distribution insights[m
[31m-        const aboveAvg = values.filter(val => val > avg).length;[m
[31m-        const aboveAvgPercent = Math.round(aboveAvg / values.length * 100);[m
[31m-        insights.push(`${aboveAvg} items (${aboveAvgPercent}%) are above the average ${actualYKey} of ${avg.toFixed(2)}.`);[m
[31m-        [m
[31m-        // Distribution type insights[m
[31m-        if (aboveAvgPercent < 30) {[m
[31m-          insights.push(`The ${actualYKey} distribution is skewed, with a small number of high-value items dominating the total.`);[m
[31m-        } else if (aboveAvgPercent > 70) {[m
[31m-          insights.push(`The ${actualYKey} distribution is heavily weighted toward the high end, with most items having above-average values.`);[m
[31m-        } else {[m
[31m-          insights.push(`The ${actualYKey} distribution is relatively balanced, with a mix of high and low values.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Concentration analysis[m
[31m-        const topThreeSum = values.sort((a, b) => b - a).slice(0, 3).reduce((a, b) => a + b, 0);[m
[31m-        const topThreePercent = (topThreeSum / sum) * 100;[m
[31m-        if (values.length > 3) {[m
[31m-          insights.push(`The top 3 items represent ${topThreePercent.toFixed(1)}% of the total ${actualYKey}, indicating a ${topThreePercent > 70 ? 'highly concentrated' : topThreePercent > 50 ? 'moderately concentrated' : 'diversified'} distribution.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Pattern analysis based on chart type[m
[31m-        if (type === 'line' || type === 'area') {[m
[31m-          // Check for trend patterns in sequential data[m
[31m-          let increasingCount = 0;[m
[31m-          let decreasingCount = 0;[m
[31m-          [m
[31m-          for (let i = 1; i < values.length; i++) {[m
[31m-            if (values[i] > values[i-1]) increasingCount++;[m
[31m-            else if (values[i] < values[i-1]) decreasingCount++;[m
[31m-          }[m
[31m-          [m
[31m-          const trendPercentage = Math.max(increasingCount, decreasingCount) / (values.length - 1) * 100;[m
[31m-          [m
[31m-          if (trendPercentage > 70) {[m
[31m-            if (increasingCount > decreasingCount) {[m
[31m-              insights.push(`The data shows a clear upward trend, with ${trendPercentage.toFixed(0)}% of sequential points increasing.`);[m
[31m-            } else {[m
[31m-              insights.push(`The data shows a clear downward trend, with ${trendPercentage.toFixed(0)}% of sequential points decreasing.`);[m
[31m-            }[m
[31m-          } else if (trendPercentage > 50) {[m
[31m-            if (increasingCount > decreasingCount) {[m
[31m-              insights.push(`The data shows a moderate upward trend, with some fluctuations.`);[m
[31m-            } else {[m
[31m-              insights.push(`The data shows a moderate downward trend, with some fluctuations.`);[m
[31m-            }[m
[31m-          } else {[m
[31m-            insights.push(`The data shows significant fluctuations without a clear directional trend.`);[m
[31m-          }[m
[31m-        } else if (type === 'pie' || type === 'donut') {[m
[31m-          // Dominance analysis for pie charts[m
[31m-          const topCategory = maxItem ? maxItem[actualXKey] : '';[m
[31m-          const topValue = maxValue;[m
[31m-          const topPercent = (topValue / sum) * 100;[m
[31m-          [m
[31m-          if (topPercent > 50) {[m
[31m-            insights.push(`${topCategory} dominates the distribution with ${topPercent.toFixed(1)}% of the total, more than all other categories combined.`);[m
[31m-          } else if (topPercent > 33) {[m
[31m-            insights.push(`${topCategory} is the leading category with ${topPercent.toFixed(1)}% of the total, showing significant prominence.`);[m
[31m-          } else if (data.length > 3) {[m
[31m-            insights.push(`The distribution is relatively fragmented across ${data.length} categories, with no single category having an overwhelming majority.`);[m
[31m-          }[m
[31m-          [m
[31m-          // Analyze even distribution[m
[31m-          const idealPerCategory = 100 / data.length;[m
[31m-          const deviation = values.reduce((sum, val) => sum + Math.abs((val / sum * 100) - idealPerCategory), 0) / data.length;[m
[31m-          [m
[31m-          if (deviation < 5) {[m
[31m-            insights.push(`The distribution is remarkably even across all categories, with minimal variation from the expected even distribution.`);[m
[31m-          } else if (deviation > 20) {[m
[31m-            insights.push(`The distribution shows significant imbalance across categories, deviating ${deviation.toFixed(1)}% from an even distribution.`);[m
[31m-          }[m
[31m-        } else if (type === 'bar' || type === 'column') {[m
[31m-          // Quartile analysis for bar charts[m
[31m-          const q1Index = Math.floor(sortedValues.length / 4);[m
[31m-          const q3Index = Math.floor(3 * sortedValues.length / 4);[m
[31m-          const q1 = sortedValues[q1Index];[m
[31m-          const q3 = sortedValues[q3Index];[m
[31m-          const iqr = q3 - q1;[m
[31m-          [m
[31m-          // Check for outliers[m
[31m-          const outlierThresholdLow = q1 - 1.5 * iqr;[m
[31m-          const outlierThresholdHigh = q3 + 1.5 * iqr;[m
[31m-          const outliers = values.filter(v => v < outlierThresholdLow || v > outlierThresholdHigh);[m
[31m-          [m
[31m-          if (outliers.length > 0) {[m
[31m-            const outlierPercent = (outliers.length / values.length) * 100;[m
[31m-            insights.push(`${outliers.length} data points (${outlierPercent.toFixed(1)}%) are statistical outliers, falling outside the expected range.`);[m
[31m-          }[m
[31m-          [m
[31m-          // Check for bimodal distribution[m
[31m-          const binSize = (maxValue - minValue) / 5; // 5 bins for analysis[m
[31m-          const bins = Array(5).fill(0);[m
[31m-          [m
[31m-          values.forEach(v => {[m
[31m-            const binIndex = Math.min(4, Math.floor((v - minValue) / binSize));[m
[31m-            bins[binIndex]++;[m
[31m-          });[m
[31m-          [m
[31m-          // Check if there are two distinct peaks[m
[31m-          const maxBin = Math.max(...bins);[m
[31m-          const maxBinIndex = bins.indexOf(maxBin);[m
[31m-          bins[maxBinIndex] = 0; // Remove the tallest peak[m
[31m-          const secondMaxBin = Math.max(...bins);[m
[31m-          const secondMaxBinIndex = bins.indexOf(secondMaxBin);[m
[31m-          [m
[31m-          if (secondMaxBin > values.length * 0.2 && Math.abs(secondMaxBinIndex - maxBinIndex) >= 2) {[m
[31m-            insights.push(`The data distribution appears bimodal, with two distinct peaks suggesting two different groups or patterns.`);[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating insights:', error);[m
[31m-      insights.push(`Analysis of ${data.length} data points shows patterns worth exploring.`);[m
[31m-    }[m
[31m-    [m
[31m-    return insights;[m
[31m-  };[m
[31m-  [m
[31m-  // Generate recommendations based on data[m
[31m-  const generateRecommendations = (type: string): string[] => {[m
[31m-    const recommendations: string[] = [];[m
[31m-    [m
[31m-    try {[m
[31m-      // General recommendations applicable to all data types[m
[31m-      recommendations.push('Consider segmenting the data further to identify hidden patterns and correlations.');[m
[31m-      recommendations.push('Analyze trends over time to identify seasonal patterns or long-term changes.');[m
[31m-      [m
[31m-      // Recommendations based on chart type[m
[31m-      if (type === 'pie' || type === 'donut') {[m
[31m-        recommendations.push('Combine categories below 5% into an "Other" category to improve chart readability.');[m
[31m-        recommendations.push('Consider switching to a bar chart if you have more than 7 categories for better visual comparison.');[m
[31m-        recommendations.push('Sort categories by value to highlight the relative importance of each segment.');[m
[31m-      } else if (type === 'bar' || type === 'column') {[m
[31m-        recommendations.push('Sort bars by value rather than category for easier identification of highest and lowest values.');[m
[31m-        recommendations.push('Use horizontal bars if you have many categories or long category names.');[m
[31m-        recommendations.push('Consider adding benchmark lines or thresholds to evaluate performance against targets.');[m
[31m-      } else if (type === 'line') {[m
[31m-        recommendations.push('Add trend lines or moving averages to smooth out fluctuations and reveal underlying patterns.');[m
[31m-        recommendations.push('Annotate significant data points to highlight key events or changes.');[m
[31m-        recommendations.push('Consider using dual axes for comparing metrics with different scales.');[m
[31m-      } else if (type === 'scatter') {[m
[31m-        recommendations.push('Add trendlines to visualize correlations between data points.');[m
[31m-        recommendations.push('Use color coding or size variations to add additional dimensions to your analysis.');[m
[31m-        recommendations.push('Consider clustering analysis to identify groups of similar data points.');[m
[31m-      } else if (type === 'heatmap') {[m
[31m-        recommendations.push('Adjust color scales to highlight specific ranges of values.');[m
[31m-        recommendations.push('Add annotations to explain particularly high or low values in the matrix.');[m
[31m-        recommendations.push('Consider hierarchical clustering to group similar rows and columns.');[m
[31m-      } else if (type === 'funnel' || type === 'treemap') {[m
[31m-        recommendations.push('Add percentage labels to highlight conversion rates between stages.');[m
[31m-        recommendations.push('Use consistent color coding to group related categories.');[m
[31m-        recommendations.push('Consider adding interactive tooltips to display detailed information for each segment.');[m
[31m-      }[m
[31m-      [m
[31m-      // Add data analysis recommendations[m
[31m-      recommendations.push('Examine outliers to understand exceptional cases that may provide valuable insights.');[m
[31m-      recommendations.push('Compare current data with historical benchmarks to identify significant changes or trends.');[m
[31m-      recommendations.push('Use statistical tests to validate whether observed patterns are statistically significant.');[m
[31m-      [m
[31m-      // Action-oriented recommendations[m
[31m-      recommendations.push('Create a dashboard with multiple visualizations to provide a comprehensive view of the data.');[m
[31m-      recommendations.push('Set up alerts for significant changes or anomalies in key metrics.');[m
[31m-      recommendations.push('Schedule regular data reviews to track changes over time and adjust strategies accordingly.');[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating recommendations:', error);[m
[31m-      recommendations.push('Analyze the data further to identify actionable insights and patterns.');[m
[31m-    }[m
[31m-    [m
[31m-    // Return a subset of recommendations to avoid overwhelming the user[m
[31m-    return recommendations.slice(0, 5);[m
[31m-  };[m
[31m-  [m
[31m-  // Generate a meaningful summary from the data[m
[31m-  const generateSummaryFromData = (data: any[]): string => {[m
[31m-    if (!data || data.length === 0) {[m
[31m-      return 'No data available for analysis.';[m
[31m-    }[m
[31m-    [m
[31m-    try {[m
[31m-      // Extract keys for analysis[m
[31m-      const keys = Object.keys(data[0]);[m
[31m-      const categories = data.map(item => item[keys[0]]);[m
[31m-      const valuesKey = keys[1] || 'value';[m
[31m-      const values = data.map(item => parseFloat(item[valuesKey])).filter(val => !isNaN(val));[m
[31m-      [m
[31m-      if (values.length === 0) {[m
[31m-        return `The dataset contains ${data.length} records, but no valid numerical values were found for analysis.`;[m
[31m-      }[m
[31m-      [m
[31m-      // Calculate basic statistics[m
[31m-      const sum = values.reduce((a, b) => a + b, 0);[m
[31m-      const avg = sum / values.length;[m
[31m-      const max = Math.max(...values);[m
[31m-      const min = Math.min(...values);[m
[31m-      const range = max - min;[m
[31m-      [m
[31m-      // Calculate standard deviation[m
[31m-      const variance = values.reduce((v, value) => v + Math.pow(value - avg, 2), 0) / values.length;[m
[31m-      const stdDev = Math.sqrt(variance);[m
[31m-      [m
[31m-      // Sort values to find median and quartiles[m
[31m-      const sortedValues = [...values].sort((a, b) => a - b);[m
[31m-      const midIndex = Math.floor(sortedValues.length / 2);[m
[31m-      const median = sortedValues.length % 2 === 0 [m
[31m-        ? (sortedValues[midIndex - 1] + sortedValues[midIndex]) / 2 [m
[31m-        : sortedValues[midIndex];[m
[31m-      [m
[31m-      // Find most frequent categories (top 3)[m
[31m-      const categoryFrequency: Record<string, number> = {};[m
[31m-      categories.forEach(cat => {[m
[31m-        categoryFrequency[cat] = (categoryFrequency[cat] || 0) + 1;[m
[31m-      });[m
[31m-      [m
[31m-      const sortedCategories = Object.entries(categoryFrequency)[m
[31m-        .sort((a, b) => b[1] - a[1])[m
[31m-        .slice(0, 3)[m
[31m-        .map(entry => entry[0]);[m
[31m-      [m
[31m-      // Identify distribution type[m
[31m-      let distributionType = '';[m
[31m-      if (Math.abs((avg - median) / avg) > 0.2) {[m
[31m-        // If mean and median differ significantly, distribution is skewed[m
[31m-        distributionType = avg > median [m
[31m-          ? 'a right-skewed (positively skewed) distribution'[m
[31m-          : 'a left-skewed (negatively skewed) distribution';[m
[31m-      } else if (stdDev / avg < 0.1) {[m
[31m-        distributionType = 'a uniform distribution with low variance';[m
[31m-      } else if (stdDev / avg > 0.5) {[m
[31m-        distributionType = 'a highly variable distribution';[m
[31m-      } else {[m
[31m-        distributionType = 'a relatively normal distribution';[m
[31m-      }[m
[31m-      [m
[31m-      // Build a comprehensive summary[m
[31m-      let summary = `Analysis of ${data.length} data points reveals ${distributionType}`;[m
[31m-      [m
[31m-      // Add details based on data size[m
[31m-      if (data.length > 10) {[m
[31m-        summary += ` across ${categories.length} unique categories`;[m
[31m-      }[m
[31m-      [m
[31m-      summary += '.';[m
[31m-      [m
[31m-      // Add statistical insights[m
[31m-      summary += ` The average ${valuesKey} is ${avg.toFixed(2)} (median: ${median.toFixed(2)})`;[m
[31m-      [m
[31m-      if (data.length > 3) {[m
[31m-        summary += `, ranging from ${min.toFixed(2)} to ${max.toFixed(2)}`;[m
[31m-      }[m
[31m-      [m
[31m-      summary += '.';[m
[31m-      [m
[31m-      // Add insights about the spread and distribution[m
[31m-      if (data.length > 5) {[m
[31m-        const cvPercent = (stdDev / avg) * 100;[m
[31m-        summary += ` The coefficient of variation is ${cvPercent.toFixed(1)}%,`;[m
[31m-        [m
[31m-        if (cvPercent < 10) {[m
[31m-          summary += ' indicating highly consistent values with minimal variation.';[m
[31m-        } else if (cvPercent < 30) {[m
[31m-          summary += ' showing moderate variation between data points.';[m
[31m-        } else {[m
[31m-          summary += ' revealing substantial variation across the dataset.';[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // Add insight about most prominent categories[m
[31m-      if (sortedCategories.length > 0 && data.length > 3) {[m
[31m-        if (sortedCategories.length === 1) {[m
[31m-          summary += ` The only category present is "${sortedCategories[0]}".`;[m
[31m-        } else {[m
[31m-          const categoryList = sortedCategories[m
[31m-            .slice(0, Math.min(3, sortedCategories.length))[m
[31m-            .map(cat => `"${cat}"`)[m
[31m-            .join(', ');[m
[31m-          [m
[31m-          summary += ` The most frequently occurring categories are ${categoryList}.`;[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      return summary;[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating data summary:', error);[m
[31m-      return `Analysis of ${data.length} data points reveals patterns worth exploring in more detail.`;[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Function to generate multiple visualizations from the same dataset[m
[31m-  const generateMultipleVisualizations = (data: any[]): any[] => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const visualizations = [];[m
[31m-    [m
[31m-    try {[m
[31m-      // Create normalized data where all rows have same structure[m
[31m-      const keys = Object.keys(data[0]);[m
[31m-      const xKey = keys[0];[m
[31m-      const yKey = keys[1] || keys[0];[m
[31m-      [m
[31m-      // Make sure data is properly formatted[m
[31m-      const normalizedData = data.map(item => {[m
[31m-        if (typeof item !== 'object' || item === null) {[m
[31m-          return { category: 'Unknown', value: 0 };[m
[31m-        }[m
[31m-        [m
[31m-        return { [m
[31m-          category: item[xKey] || 'Unknown', [m
[31m-          value: typeof item[yKey] === 'number' ? item[yKey] : parseFloat(item[yKey]) || 0[m
[31m-        };[m
[31m-      });[m
[31m-      [m
[31m-      console.log('Generating multiple visualizations from data:', normalizedData);[m
[31m-      [m
[31m-      // Bar chart - always include for categorical data[m
[31m-      visualizations.push({[m
[31m-        id: 'data-distribution-bar',[m
[31m-        title: 'Data Distribution by Category',[m
[31m-        description: 'Distribution of values across categories',[m
[31m-        type: 'bar',[m
[31m-        data: data, // Use original data format[m
[31m-        xKey: xKey,[m
[31m-        yKey: yKey,[m
[31m-        series: [{ dataKey: yKey, name: 'Value' }],[m
[31m-        xAxisLabel: 'Category',[m
[31m-        yAxisLabel: 'Value',[m
[31m-        options: {[m
[31m-          forceChartType: 'bar'[m
[31m-        }[m
[31m-      });[m
[31m-      [m
[31m-      // Pie chart - good for showing proportions[m
[31m-      visualizations.push({[m
[31m-        id: 'data-distribution-pie',[m
[31m-        title: 'Proportional Distribution',[m
[31m-        description: 'Proportional representation of each category',[m
[31m-        type: 'pie',[m
[31m-        data: data, // Use original data format[m
[31m-        xKey: xKey,[m
[31m-        yKey: yKey,[m
[31m-        series: [{ dataKey: yKey, name: 'Value' }],[m
[31m-        options: {[m
[31m-          forceChartType: 'pie',[m
[31m-          isPieChart: true,[m
[31m-          useMultipleColors: true[m
[31m-        }[m
[31m-      });[m
[31m-      [m
[31m-      // Line chart - for trend visualization[m
[31m-      visualizations.push({[m
[31m-        id: 'data-trend-line',[m
[31m-        title: 'Value Trend Analysis',[m
[31m-        description: 'Trend analysis showing patterns across categories',[m
[31m-        type: 'line',[m
[31m-        data: data, // Use original data format[m
[31m-        xKey: xKey,[m
[31m-        yKey: yKey,[m
[31m-        series: [{ dataKey: yKey, name: 'Value' }],[m
[31m-        xAxisLabel: 'Category',[m
[31m-        yAxisLabel: 'Value',[m
[31m-        options: {[m
[31m-          forceChartType: 'line'[m
[31m-        }[m
[31m-      });[m
[31m-      [m
[31m-      // If there are enough data points, add a treemap[m
[31m-      if (data.length >= 3) {[m
[31m-        visualizations.push({[m
[31m-          id: 'data-treemap',[m
[31m-          title: 'Hierarchical Value Distribution',[m
[31m-          description: 'Treemap showing the relative size of each category',[m
[31m-          type: 'treemap',[m
[31m-          data: data, // Use original data format[m
[31m-          xKey: xKey,[m
[31m-          yKey: yKey, [m
[31m-          options: {[m
[31m-            forceChartType: 'treemap'[m
[31m-          }[m
[31m-        });[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating multiple visualizations:', error);[m
[31m-    }[m
[31m-    [m
[31m-    return visualizations;[m
[31m-  };[m
[31m-  [m
[31m-  // Add visualization step if visualizationData is provided[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationData && [m
[31m-        visualizationData.data && [m
[31m-        Array.isArray(visualizationData.data) && [m
[31m-        visualizationData.data.length > 0 && [m
[31m-        visualizationData.type) {[m
[31m-      [m
[31m-      // Check if this visualization data already exists in steps[m
[31m-      const dataString = JSON.stringify(visualizationData.data);[m
[31m-      const prevDataString = visualizationDataRef.current;[m
[31m-      [m
[31m-      // Only add a new step if the data has changed[m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationDataRef.current = dataString;[m
[31m-        [m
[31m-        // Check if the step already exists[m
[31m-        const existingStep = steps.find(step => [m
[31m-          step.visualization && [m
[31m-          JSON.stringify(step.visualization.config.data) === dataString[m
[31m-        );[m
[31m-        [m
[31m-        if (!existingStep) {[m
[31m-          // Generate multiple visualizations from the data[m
[31m-          const multipleVizs = generateMultipleVisualizations(visualizationData.data);[m
[31m-          [m
[31m-          // Set the multiple visualizations data directly[m
[31m-          // This is important to ensure the visualizationsData is available for rendering[m
[31m-          if (multipleVizs && multipleVizs.length > 0) {[m
[31m-            console.log(`Generated ${multipleVizs.length} visualizations:`, multipleVizs);[m
[31m-          }[m
[31m-          [m
[31m-          // Generate meaningful insights from the data[m
[31m-          const dataInsights = generateInsightsFromData([m
[31m-            visualizationData.data, [m
[31m-            visualizationData.type,[m
[31m-            visualizationData.xKey,[m
[31m-            visualizationData.yKey[m
[31m-          );[m
[31m-          [m
[31m-          // Generate recommendations[m
[31m-          const dataRecommendations = generateRecommendations(visualizationData.type);[m
[31m-          [m
[31m-          // Generate detailed summary[m
[31m-          const dataSummary = generateSummaryFromData(visualizationData.data);[m
[31m-          [m
[31m-          // Respect the requested chart type[m
[31m-          const chartType = visualizationData.options?.forceChartType || [m
[31m-                           visualizationData.type || [m
[31m-                           (visualizationData.options?.isPieChart ? 'pie' : 'bar');[m
[31m-          [m
[31m-          // Create a new step with proper visualization[m
[31m-          const newStep: AnalyticalStep = {[m
[31m-            id: `viz-${Date.now()}`,[m
[31m-            type: 'visualization',[m
[31m-            description: `Comprehensive Analysis of ${visualizationData.title || 'Dataset'}`,[m
[31m-            order: steps.length + 1,[m
[31m-            content: `## ${visualizationData.title || 'Data Analysis'}\n\n` +[m
[31m-                    `${dataSummary}\n\n` +[m
[31m-                    '```json\n' + [m
[31m-                    JSON.stringify(visualizationData.data, null, 2) + [m
[31m-                    '\n```',[m
[31m-            insights: dataInsights,[m
[31m-            recommendations: dataRecommendations,[m
[31m-            metrics: generateMetricsFromData(visualizationData.data),[m
[31m-            visualization: {[m
[31m-              type: chartType,[m
[31m-              config: {[m
[31m-                data: visualizationData.data,[m
[31m-                xKey: visualizationData.xKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : undefined),[m
[31m-                yKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : undefined),[m
[31m-                series: visualizationData.series || [[m
[31m-                  {[m
[31m-                    dataKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'value'),[m
[31m-                    name: visualizationData.title || 'Value'[m
[31m-                  }[m
[31m-                ],[m
[31m-                labels: {[m
[31m-                  title: visualizationData.title || `Data Analysis`,[m
[31m-                  xAxis: visualizationData.xAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : 'Category'),[m
[31m-                  yAxis: visualizationData.yAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'Value')[m
[31m-                },[m
[31m-                options: {[m
[31m-                  useDirectColorAssignment: true,[m
[31m-                  useMultipleColors: true,[m
[31m-                  theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-                  ...visualizationData.options[m
[31m-                }[m
[31m-              }[m
[31m-            }[m
[31m-          };[m
[31m-          [m
[31m-          // Add the new step to the steps array[m
[31m-          setSteps(prevSteps => [...prevSteps, newStep]);[m
[31m-          [m
[31m-          // Auto-expand the new step[m
[31m-          setExpandedSteps(prev => [...prev, newStep.id]);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationData, steps]);[m
[31m-  [m
[31m-  // New effect to handle visualizationsData property directly[m
[31m-  // This ensures multiple visualization slides are rendered[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationsData && [m
[31m-        Array.isArray(visualizationsData) && [m
[31m-        visualizationsData.length > 0) {[m
[31m-      [m
[31m-      // Check if the visualizations data has changed[m
[31m-      const dataString = JSON.stringify(visualizationsData);[m
[31m-      const prevDataString = visualizationsDataRef.current;[m
[31m-      [m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationsDataRef.current = dataString;[m
[31m-        console.log(`Processing ${visualizationsData.length} visualizations directly from props`);[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationsData]);[m
[31m-  [m
[31m-  // Make sure initial data for visualizationsData[m
[31m-  useEffect(() => {[m
[31m-    // If we have a single visualization but no multiple visualizations,[m
[31m-    // generate multiple visualizations from the single one[m
[31m-    if (visualizationData && [m
[31m-        visualizationData.data && [m
[31m-        Array.isArray(visualizationData.data) && [m
[31m-        visualizationData.data.length > 0 &&[m
[31m-        (!visualizationsData || visualizationsData.length === 0)) {[m
[31m-      [m
[31m-      // Generate multiple visualizations from visualizationData[m
[31m-      const multipleVizs = generateMultipleVisualizations(visualizationData.data);[m
[31m-      console.log(`Generated ${multipleVizs.length} visualizations from single visualization data`);[m
[31m-      [m
[31m-      // This will directly modify the DOM to update the visualizationsData array[m
[31m-      if (multipleVizs && multipleVizs.length > 0) {[m
[31m-        // Create a custom event to trigger the visualization update[m
[31m-        const vizEvent = new CustomEvent('multipleVisualizationsGenerated', { [m
[31m-          detail: { visualizations: multipleVizs }[m
[31m-        });[m
[31m-        window.dispatchEvent(vizEvent);[m
[31m-        [m
[31m-        // Also log to console for debugging[m
[31m-        console.log('Multiple visualizations ready for rendering', multipleVizs);[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationData, visualizationsData]);[m
[31m-[m
[31m-  // Function to generate a new chart type from existing data[m
[31m-  const generateAlternateChartType = useCallback((data: any[], currentType: string) => {[m
[31m-    if (!data || data.length === 0) return null;[m
[31m-    [m
[31m-    // Choose a different chart type than the current one[m
[31m-    const chartTypes = ['bar', 'pie', 'line', 'area', 'treemap'];[m
[31m-    const filteredTypes = chartTypes.filter(type => type !== currentType);[m
[31m-    const randomType = filteredTypes[Math.floor(Math.random() * filteredTypes.length)];[m
[31m-    [m
[31m-    const keys = Object.keys(data[0]);[m
[31m-    return {[m
[31m-      id: `alt-chart-${Date.now()}`,[m
[31m-      title: `Alternative ${randomType.charAt(0).toUpperCase() + randomType.slice(1)} View`,[m
[31m-      description: `${randomType.charAt(0).toUpperCase() + randomType.slice(1)} chart visualization of the same data`,[m
[31m-      type: randomType,[m
[31m-      data: data,[m
[31m-      xKey: keys[0],[m
[31m-      yKey: keys[1] || 'value',[m
[31m-      options: {[m
[31m-        forceChartType: randomType,[m
[31m-        useMultipleColors: true[m
[31m-      }[m
[31m-    };[m
[31m-  }, []);[m
[31m-[m
[31m-  // Add listener for the custom event to update visualizationsData[m
[31m-  useEffect(() => {[m
[31m-    const handleVisualizationsGenerated = (event: any) => {[m
[31m-      const generatedVisualizations = event.detail?.visualizations;[m
[31m-      if (generatedVisualizations && Array.isArray(generatedVisualizations)) {[m
[31m-        console.log(`Received ${generatedVisualizations.length} visualizations from event`);[m
[31m-        [m
[31m-        // Update component state with the new visualizations[m
[31m-        if (visualizationData && visualizationData.data) {[m
[31m-          // Add an alternative chart type to increase diversity[m
[31m-          const alternateViz = generateAlternateChartType([m
[31m-            visualizationData.data, [m
[31m-            visualizationData.type || 'bar'[m
[31m-          );[m
[31m-          [m
[31m-          // Combine with the generated visualizations[m
[31m-          const combinedVisualizations = [...generatedVisualizations];[m
[31m-          if (alternateViz) {[m
[31m-            combinedVisualizations.push(alternateViz);[m
[31m-          }[m
[31m-          [m
[31m-          // Force an update to the DOM[m
[31m-          console.log('Setting multiple visualizations for rendering', combinedVisualizations);[m
[31m-          visualizationsDataRef.current = JSON.stringify(combinedVisualizations);[m
[31m-          [m
[31m-          // Force a component re-render[m
[31m-          // This will trigger the rendering of the visualization slides[m
[31m-          setIsReady(prev => !prev);[m
[31m-          setTimeout(() => setIsReady(prev => !prev), 50);[m
[31m-        }[m
[31m-      }[m
[31m-    };[m
[31m-    [m
[31m-    window.addEventListener('multipleVisualizationsGenerated', handleVisualizationsGenerated);[m
[31m-    return () => {[m
[31m-      window.removeEventListener('multipleVisualizationsGenerated', handleVisualizationsGenerated);[m
[31m-    };[m
[31m-  }, [visualizationData, generateAlternateChartType]);[m
[31m-  [m
[31m-  // If no steps, show placeholder[m
[31m-  if ((!steps || steps.length === 0) && insights.length === 0 && !summary && !visualizationData && (!visualizationsData || visualizationsData.length === 0)) {[m
[31m-    return ([m
[31m-      <div className="rag-response-container">[m
[31m-        <div className="text-center text-gray-500 dark:text-gray-400 p-4">[m
[31m-          No visualization data available[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  }[m
[31m-  [m
[31m-  // Render a loading placeholder if not ready[m
[31m-  const renderLoadingPlaceholder = () => {[m
[31m-    return ([m
[31m-      <div className="p-4 bg-white dark:bg-gray-800 rounded-lg animate-pulse">[m
[31m-        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>[m
[31m-        <div className="space-y-2">[m
[31m-          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>[m
[31m-          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>[m
[31m-          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  // Check if we should render content or loading placeholder[m
[31m-  const shouldRenderContent = isReady || initialSteps.length > 0 || summary || visualizationData || (visualizationsData && visualizationsData.length > 0);[m
[31m-[m
[31m-  // Return the appropriate content[m
[31m-  if (!shouldRenderContent) {[m
[31m-    return renderLoadingPlaceholder();[m
[31m-  }[m
[31m-  [m
[31m-  // Function to handle visualization slides navigation[m
[31m-  const navigateSlide = (direction: 'next' | 'prev' | number) => {[m
[31m-    if (!localVisualizationsData || localVisualizationsData.length === 0) return;[m
[31m-    [m
[31m-    if (typeof direction === 'number') {[m
[31m-      // Direct navigation to a specific slide[m
[31m-      if (direction >= 0 && direction < localVisualizationsData.length) {[m
[31m-        setCurrentSlide(direction);[m
[31m-      }[m
[31m-    } else if (direction === 'next') {[m
[31m-      setCurrentSlide(current => (current + 1) % localVisualizationsData.length);[m
[31m-    } else {[m
[31m-      setCurrentSlide(current => (current - 1 + localVisualizationsData.length) % localVisualizationsData.length);[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Render visualization slides section if available[m
[31m-  const renderVisualizationSlides = () => {[m
[31m-    if (!localVisualizationsData || localVisualizationsData.length === 0) {[m
[31m-      return null;[m
[31m-    }[m
[31m-    [m
[31m-    // Get current visualization[m
[31m-    const currentViz = localVisualizationsData[currentSlide];[m
[31m-    if (!currentViz) return null;[m
[31m-    [m
[31m-    return ([m
[31m-      <div className="section mb-6">[m
[31m-        <h3 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-100 flex items-center justify-between">[m
[31m-          <div className="flex items-center">[m
[31m-            <span className="bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 w-7 h-7 rounded-full flex items-center justify-center mr-2 text-sm">[m
[31m-              3[m
[31m-            </span>[m
[31m-            <span>Visualizations</span>[m
[31m-            <span className="ml-2 text-sm text-gray-500 dark:text-gray-400">[m
[31m-              ({currentSlide + 1} of {localVisualizationsData.length})[m
[31m-            </span>[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Navigation controls */}[m
[31m-          <div className="flex items-center space-x-2">[m
[31m-            <button [m
[31m-              onClick={() => navigateSlide('prev')}[m
[31m-              className="p-1 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition"[m
[31m-              aria-label="Previous visualization"[m
[31m-              disabled={localVisualizationsData.length <= 1}[m
[31m-            >[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">[m
[31m-                <path fillRule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clipRule="evenodd" />[m
[31m-              </svg>[m
[31m-            </button>[m
[31m-            <button [m
[31m-              onClick={() => navigateSlide('next')}[m
[31m-              className="p-1 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition"[m
[31m-              aria-label="Next visualization"[m
[31m-              disabled={localVisualizationsData.length <= 1}[m
[31m-            >[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">[m
[31m-                <path fillRule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clipRule="evenodd" />[m
[31m-              </svg>[m
[31m-            </button>[m
[31m-          </div>[m
[31m-        </h3>[m
[31m-        [m
[31m-        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700/80 p-5 backdrop-blur-sm">[m
[31m-          {/* Slide header */}[m
[31m-          <div className="mb-4">[m
[31m-            <h4 className="text-base font-medium text-gray-900 dark:text-gray-100">{currentViz.title}</h4>[m
[31m-            {currentViz.description && ([m
[31m-              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{currentViz.description}</p>[m
[31m-            )}[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Visualization with insights */}[m
[31m-          <div className="mb-4">[m
[31m-            {renderVisualization(currentViz)}[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Slide indicator dots */}[m
[31m-          {localVisualizationsData.length > 1 && ([m
[31m-            <div className="flex justify-center mt-4 space-x-2">[m
[31m-              {localVisualizationsData.map((_, index) => ([m
[31m-                <button[m
[31m-                  key={index}[m
[31m-                  onClick={() => navigateSlide(index)}[m
[31m-                  className={`w-2 h-2 rounded-full ${[m
[31m-                    index === currentSlide [m
[31m-                      ? 'bg-blue-600 dark:bg-blue-400' [m
[31m-                      : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'[m
[31m-                  }`}[m
[31m-                  aria-label={`Go to slide ${index + 1}`}[m
[31m-                />[m
[31m-              ))}[m
[31m-            </div>[m
[31m-          )}[m
[31m-          [m
[31m-          {/* Data table toggle */}[m
[31m-          <div className="mt-4 border-t border-gray-100 dark:border-gray-700 pt-4">[m
[31m-            <button[m
[31m-              onClick={() => setShowDataTable(!showDataTable)}[m
[31m-              className="flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"[m
[31m-            >[m
[31m-              {showDataTable ? ([m
[31m-                <>[m
[31m-                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4 mr-1">[m
[31m-                    <path fillRule="evenodd" d="M14.77 12.79a.75.75 0 01-1.06-.02L10 8.832 6.29 12.77a.75.75 0 11-1.08-1.04l4.25-4.5a.75.75 0 011.08 0l4.25 4.5a.75.75 0 01-.02 1.06z" clipRule="evenodd" />[m
[31m-                  </svg>[m
[31m-                  Hide Data Source[m
[31m-                </>[m
[31m-              ) : ([m
[31m-                <>[m
[31m-                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4 mr-1">[m
[31m-                    <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clipRule="evenodd" />[m
[31m-                  </svg>[m
[31m-                  View Data Source[m
[31m-                </>[m
[31m-              )}[m
[31m-            </button>[m
[31m-            [m
[31m-            {/* Data table */}[m
[31m-            {showDataTable && currentViz.data && Array.isArray(currentViz.data) && ([m
[31m-              <div className="mt-3 overflow-x-auto text-xs">[m
[31m-                <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">[m
[31m-                  <thead className="bg-gray-50 dark:bg-gray-800">[m
[31m-                    <tr>[m
[31m-                      {Object.keys(currentViz.data[0]).map(key => ([m
[31m-                        <th key={key} className="px-3 py-2 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">[m
[31m-                          {key}[m
[31m-                        </th>[m
[31m-                      ))}[m
[31m-                    </tr>[m
[31m-                  </thead>[m
[31m-                  <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">[m
[31m-                    {currentViz.data.slice(0, 5).map((item, index) => ([m
[31m-                      <tr key={index} className={index % 2 === 0 ? 'bg-white dark:bg-gray-800' : 'bg-gray-50 dark:bg-gray-700/30'}>[m
[31m-                        {Object.keys(currentViz.data[0]).map(key => ([m
[31m-                          <td key={`${index}-${key}`} className="px-3 py-2 whitespace-nowrap text-gray-700 dark:text-gray-300">[m
[31m-                            {typeof item[key] === 'number' ? item[key].toLocaleString() : String(item[key])}[m
[31m-                          </td>[m
[31m-                        ))}[m
[31m-                      </tr>[m
[31m-                    ))}[m
[31m-                  </tbody>[m
[31m-                </table>[m
[31m-                {currentViz.data.length > 5 && ([m
[31m-                  <div className="text-center py-2 text-xs text-gray-500 dark:text-gray-400">[m
[31m-                    Showing 5 of {currentViz.data.length} rows[m
[31m-                  </div>[m
[31m-                )}[m
[31m-              </div>[m
[31m-            )}[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Actions footer */}[m
[31m-          <div className="mt-4 border-t border-gray-100 dark:border-gray-700 pt-4 flex justify-end">[m
[31m-            <button[m
[31m-              onClick={() => {[m
[31m-                // Format visualization data for dashboard[m
[31m-                const visualization = {[m
[31m-                  title: currentViz.title,[m
[31m-                  type: currentViz.type,[m
[31m-                  data: currentViz.data,[m
[31m-                  config: {[m
[31m-                    xAxis: currentViz.xKey,[m
[31m-                    yAxis: currentViz.yKey,[m
[31m-                    chartType: currentViz.type,[m
[31m-                    ...currentViz.options[m
[31m-                  }[m
[31m-                };[m
[31m-                // Add to dashboard[m
[31m-                dataProcessingService.addToDashboard(visualization);[m
[31m-              }}[m
[31m-              className="flex items-center text-xs px-3 py-1.5 bg-blue-50 text-blue-600 dark:bg-blue-900/20 dark:text-blue-400 rounded hover:bg-blue-100 dark:hover:bg-blue-800/30"[m
[31m-            >[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-3.5 h-3.5 mr-1">[m
[31m-                <path d="M10.75 4.75a.75.75 0 00-1.5 0v4.5h-4.5a.75.75 0 000 1.5h4.5v4.5a.75.75 0 001.5 0v-4.5h4.5a.75.75 0 000-1.5h-4.5v-4.5z" />[m
[31m-              </svg>[m
[31m-              Add to Dashboard[m
[31m-            </button>[m
[31m-          </div>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  };[m
[31m-  [m
[31m-  return ([m
[31m-    <StepContext.Provider value={contextValue}>[m
[31m-      <div className={`step-by-step-visualization ${expandedSteps.length === steps.length ? 'is-complete' : ''}`}>[m
[31m-        {/* No data message */}[m
[31m-        {initialSteps.length === 0 && !summary && !visualizationData && (!visualizationsData || visualizationsData.length === 0) && ([m
[31m-          <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6">[m
[31m-            <div className="flex flex-col items-center justify-center text-center">[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-12 h-12 text-gray-400 mb-4">[m
[31m-                <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />[m
[31m-              </svg>[m
[31m-              <h3 className="text-lg font-semibold mb-2 text-gray-800 dark:text-gray-200">No Data Found</h3>[m
[31m-              <p className="text-gray-600 dark:text-gray-400 mb-4">[m
[31m-                No relevant data was found for your query in the selected {normalizedDataSourceType || 'data source'}. [m
[31m-                Please try a different query or select another data source.[m
[31m-              </p>[m
[31m-              <div className="flex flex-col space-y-3">[m
[31m-                <div className="text-sm text-gray-500 dark:text-gray-400 mb-2">[m
[31m-                  <strong>Troubleshooting tips:</strong>[m
[31m-                  <ul className="list-disc list-inside mt-1">[m
[31m-                    <li>Make sure your query is related to the content in the {normalizedDataSourceType || 'data source'}</li>[m
[31m-                    {normalizedDataSourceType === 'pdf' && ([m
[31m-                      <>[m
[31m-                        <li>Try using specific terms that appear in the PDF document</li>[m
[31m-                        <li>Ask about specific sections, pages, or topics in the document</li>[m
[31m-                      </>[m
[31m-                    )}[m
[31m-                    {normalizedDataSourceType === 'excel' && ([m
[31m-                      <>[m
[31m-                        <li>Try referring to specific columns or data categories in the spreadsheet</li>[m
[31m-                        <li>Ask for specific calculations or data summaries</li>[m
[31m-                      </>[m
[31m-                    )}[m
[31m-                    {normalizedDataSourceType === 'database' && ([m
[31m-                      <>[m
[31m-                        <li>Try using more specific database terminology in your query</li>[m
[31m-                        <li>Ask about specific tables, records, or fields</li>[m
[31m-                      </>[m
[31m-                    )}[m
[31m-                    {normalizedDataSourceType === 'qdrant' && ([m
[31m-                      <>[m
[31m-                        <li>Try using more specific semantic search terms</li>[m
[31m-                        <li>Ask about concepts rather than exact matches</li>[m
[31m-                      </>[m
[31m-                    )}[m
[31m-                    <li>Check if the data source was properly indexed</li>[m
[31m-                    <li>Verify that the data source type is correctly identified (current: {normalizedDataSourceType || 'unknown'})</li>[m
[31m-                  </ul>[m
[31m-                </div>[m
[31m-                <div className="text-xs text-gray-500 mt-2">[m
[31m-                  Data source: {normalizedDataSourceType || 'unknown'}[m
[31m-                </div>[m
[31m-              </div>[m
[31m-            </div>[m
[31m-          </div>[m
[31m-        )}[m
[31m-        [m
[31m-        {/* Summary section - always show if available */}[m
[31m-        {summary && ([m
[31m-          <div className="section mb-6">[m
[31m-            <h3 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-100 flex items-center">[m
[31m-              <span className="bg-purple-100 dark:bg-purple-900/30 text-purple-800 dark:text-purple-300 w-7 h-7 rounded-full flex items-center justify-center mr-2 text-sm">[m
[31m-                1[m
[31m-              </span>[m
[31m-              Summary & Analysis[m
[31m-            </h3>[m
[31m-              <div className="bg-white dark:bg-gray-800/90 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700/80 p-5 backdrop-blur-sm">[m
[31m-              <div className="prose prose-sm dark:prose-invert max-w-none prose-headings:text-gray-800 dark:prose-headings:text-gray-100 prose-p:text-gray-700 dark:prose-p:text-gray-200 text-gray-800 dark:text-gray-200 prose-headings:font-semibold prose-h2:text-lg prose-h3:text-base prose-h2:mt-6 prose-h2:mb-4 prose-h3:mt-4 prose-h3:mb-2 prose-hr:my-5 prose-hr:border-gray-200 dark:prose-hr:border-gray-700">[m
[31m-                <MessageMarkdown content={summary} />[m
[31m-              </div>[m
[31m-            </div>[m
[31m-              </div>[m
[31m-            )}[m
[31m-        [m
[31m-        {/* Insights section */}[m
[31m-        {insights && insights.length > 0 && ([m
[31m-          <div className="section mb-6">[m
[31m-            <h3 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-100 flex items-center">[m
[31m-              <span className="bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-300 w-7 h-7 rounded-full flex items-center justify-center mr-2 text-sm">[m
[31m-                {(summary ? 1 : 0) + [m
[31m-                 (insights.length > 0 ? 1 : 0) + [m
[31m-                 (recommendations.length > 0 ? 1 : 0) + [m
[31m-                 (visualizationsData && visualizationsData.length > 0 ? visualizationsData.length : 0) + [m
[31m-                 (visualizationData ? 1 : 0) + [m
[31m-                 1}[m
[31m-              </span>[m
[31m-              Key Insights[m
[31m-            </h3>[m
[31m-            <div className="bg-white dark:bg-gray-800/90 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700/80 p-5 backdrop-blur-sm">[m
[31m-              <ul className="space-y-2">[m
[31m-                {insights.map((insight, index) => ([m
[31m-                  <li key={index} className="flex items-start">[m
[31m-                    <span className="text-blue-500 mr-2 mt-0.5">â€¢</span>[m
[31m-                    <span className="text-gray-700 dark:text-gray-300">{insight}</span>[m
[31m-                  </li>[m
[31m-                ))}[m
[31m-              </ul>[m
[31m-            </div>[m
[31m-          </div>[m
[31m-        )}[m
[31m-        [m
[31m-        {/* Recommendations section if available */}[m
[31m-        {recommendations && recommendations.length > 0 && ([m
[31m-          <div className="section mb-6">[m
[31m-            <h3 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-100 flex items-center">[m
[31m-              <span className="bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 w-7 h-7 rounded-full flex items-center justify-center mr-2 text-sm">[m
[31m-                {(summary ? 1 : 0) + [m
[31m-                 (insights.length > 0 ? 1 : 0) + [m
[31m-                 (recommendations.length > 0 ? 1 : 0) + [m
[31m-                 (visualizationsData && visualizationsData.length > 0 ? visualizationsData.length : 0) + [m
[31m-                 (visualizationData ? 1 : 0) + [m
[31m-                 1}[m
[31m-              </span>[m
[31m-              Recommendations[m
[31m-            </h3>[m
[31m-              <div className="bg-white dark:bg-gray-800/90 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700/80 p-5 backdrop-blur-sm">[m
[31m-              <ul className="space-y-2">[m
[31m-                {recommendations.map((recommendation, index) => ([m
[31m-                  <li key={index} className="flex items-start">[m
[31m-                    <span className="text-green-500 mr-2 mt-0.5">âœ“</span>[m
[31m-                    <span className="text-gray-700 dark:text-gray-300">{recommendation}</span>[m
[31m-                  </li>[m
[31m-                ))}[m
[31m-              </ul>[m
[31m-            </div>[m
[31m-              </div>[m
[31m-            )}[m
[31m-        [m
[31m-        {/* Visualization slides - new section */}[m
[31m-        {renderVisualizationSlides()}[m
[31m-        [m
[31m-        {/* Original steps section - keep for backward compatibility */}[m
[31m-        {steps && steps.length > 0 && ([m
[31m-          <div className="section">[m
[31m-            {/* ... existing code ... */}[m
[31m-          </div>[m
[31m-        )}[m
[31m-      </div>[m
[31m-    </StepContext.Provider>[m
[31m-  );[m
[31m-};[m
[31m-[m
[31m-export function createSampleAnalysisSteps(): AnalyticalStep[] {[m
[31m-  return [[m
[31m-    {[m
[31m-      id: '1',[m
[31m-      type: 'info',[m
[31m-      description: 'First, I reviewed the \'Sales\' column to determine the total sales for each segment.',[m
[31m-      order: 1,[m
[31m-      content: 'I aggregated the data by segment to calculate total sales. This allowed me to understand the overall performance of each business segment and regional market.',[m
[31m-      insights: [[m
[31m-        'Consumer segment leads with 41% of total sales',[m
[31m-        'North America region accounts for 52% of all sales',[m
[31m-        'Q4 sales were 32% higher than Q3 across all segments'[m
[31m-      ],[m
[31m-      metrics: [[m
[31m-        {label: 'Total Sales', value: '$7.8M'},[m
[31m-        {label: 'Top Segment', value: 'Consumer'},[m
[31m-        {label: 'YoY Growth', value: '+12.3%'}[m
[31m-      ],[m
[31m-      data: [[m
[31m-        {segment: 'Consumer', sales: '$3,200,000', percentage: '41%', growth: '+15.3%'},[m
[31m-        {segment: 'Corporate', sales: '$2,700,000', percentage: '35%', growth: '+10.1%'},[m
[31m-        {segment: 'Small Business', sales: '$1,900,000', percentage: '24%', growth: '+8.7%'}[m
[31m-      ],[m
[31m-      visualization: {[m
[31m-        type: 'pie',[m
[31m-        config: {[m
[31m-          data: [[m
[31m-            {name: 'Consumer', value: 41},[m
[31m-            {name: 'Corporate', value: 35},[m
[31m-            {name: 'Small Business', value: 24}[m
[31m-          ],[m
[31m-          series: [[m
[31m-            {dataKey: 'value', name: 'Percentage'}[m
[31m-          ],[m
[31m-          labels: {[m
[31m-            title: 'Sales Distribution by Segment',[m
[31m-            xAxis: 'Segment',[m
[31m-            yAxis: 'Sales (%)'[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  ];[m
[31m-} [m
\ No newline at end of file[m
[1mdiff --git a/dashboard/src/components/Chat/components/EnhancedStepByStepVisualization.tsx.backup2 b/dashboard/src/components/Chat/components/EnhancedStepByStepVisualization.tsx.backup2[m
[1mdeleted file mode 100644[m
[1mindex d175e05..0000000[m
[1m--- a/dashboard/src/components/Chat/components/EnhancedStepByStepVisualization.tsx.backup2[m
[1m+++ /dev/null[m
[36m@@ -1,2363 +0,0 @@[m
[31m-import React, { useState, useEffect, Suspense, useRef, useMemo, useCallback } from 'react';[m
[31m-import { motion } from 'framer-motion';[m
[31m-import { DataProcessingService } from '../../../services/DataProcessingService';[m
[31m-import { useNotification } from '../../../contexts/NotificationContext';[m
[31m-import { LazyVisualizationWrapper } from '../../../components/shared/LazyVisualization';[m
[31m-import { MessageMarkdown } from './MessageMarkdown';[m
[31m-import { TableFormatter } from '../../../services/TableFormatter';[m
[31m-import { TableVisualization } from '../../../Visualization/tables/TableVisualization';[m
[31m-[m
[31m-// Helper function to map our internal chart types to the expected chart types[m
[31m-function mapChartType(type: string): string {[m
[31m-  // Normalize the input type by removing underscores and converting to lowercase[m
[31m-  const normalizedType = type.toLowerCase().replace(/_/g, '').replace(/chart$/, '');[m
[31m-  [m
[31m-  // Debug log for chart type mapping[m
[31m-  console.debug(`[Chart Type Mapping] Original: "${type}", Normalized: "${normalizedType}"`);[m
[31m-  [m
[31m-  const typeMap: Record<string, string> = {[m
[31m-    'bar': 'bar',[m
[31m-    'barchart': 'bar',[m
[31m-    'bar_chart': 'bar',[m
[31m-    'line': 'line',[m
[31m-    'linechart': 'line',[m
[31m-    'line_chart': 'line',[m
[31m-    'pie': 'pie',[m
[31m-    'piechart': 'pie',[m
[31m-    'pie_chart': 'pie',[m
[31m-    'area': 'area',[m
[31m-    'areachart': 'area',[m
[31m-    'area_chart': 'area',[m
[31m-    'scatter': 'scatter',[m
[31m-    'scatterchart': 'scatter',[m
[31m-    'scatter_chart': 'scatter',[m
[31m-    'composed': 'composed',[m
[31m-    'composedchart': 'composed',[m
[31m-    'composed_chart': 'composed',[m
[31m-    'heatmap': 'heatmap',[m
[31m-    'heatmapchart': 'heatmap',[m
[31m-    'radar': 'radar',[m
[31m-    'radarchart': 'radar',[m
[31m-    'radar_chart': 'radar',[m
[31m-    'funnel': 'funnel',[m
[31m-    'funnelchart': 'funnel',[m
[31m-    'funnel_chart': 'funnel',[m
[31m-    'treemap': 'treemap',[m
[31m-    'treemapchart': 'treemap',[m
[31m-    'treemap_chart': 'treemap',[m
[31m-    'network': 'network',[m
[31m-    'networkgraph': 'network',[m
[31m-    'network_graph': 'network',[m
[31m-    'geospatial': 'geospatial',[m
[31m-    'geospatialmap': 'geospatial',[m
[31m-    'geospatial_map': 'geospatial',[m
[31m-    'sankey': 'sankey',[m
[31m-    'sankeydiagram': 'sankey',[m
[31m-    'sankey_diagram': 'sankey',[m
[31m-    'table': 'table'[m
[31m-  };[m
[31m-  [m
[31m-  // Try to match the normalized type first[m
[31m-  if (typeMap[normalizedType]) {[m
[31m-    const result = typeMap[normalizedType];[m
[31m-    console.debug(`[Chart Type Mapping] Matched normalized type: "${normalizedType}" â†’ "${result}"`);[m
[31m-    return result;[m
[31m-  }[m
[31m-  [m
[31m-  // If no match with normalized type, try the original type[m
[31m-  const result = typeMap[type] || type || 'bar';[m
[31m-  console.debug(`[Chart Type Mapping] Final result: "${result}"`);[m
[31m-  return result;[m
[31m-}[m
[31m-[m
[31m-// Helper function to validate and normalize visualization types[m
[31m-function validateVisualizationType(type: string | undefined): string {[m
[31m-  console.log(`[DEBUG] validateVisualizationType called with type: "${type}"`);[m
[31m-  [m
[31m-  if (!type) {[m
[31m-    console.log('[DEBUG] No type provided, defaulting to "bar"');[m
[31m-    return 'bar'; // Default to bar if no type provided[m
[31m-  }[m
[31m-  [m
[31m-  // Check URL parameters for forced chart type[m
[31m-  try {[m
[31m-    const urlParams = new URLSearchParams(window.location.search);[m
[31m-    const forcedChartType = urlParams.get('chartType');[m
[31m-    if (forcedChartType) {[m
[31m-      console.log(`[DEBUG] Forcing chart type from URL parameter: "${forcedChartType}"`);[m
[31m-      return mapChartType(forcedChartType);[m
[31m-    }[m
[31m-  } catch (error) {[m
[31m-    console.error('Error checking URL parameters:', error);[m
[31m-  }[m
[31m-  [m
[31m-  // Get the mapped type[m
[31m-  const mappedType = mapChartType(type);[m
[31m-  console.log(`[DEBUG] Type "${type}" mapped to "${mappedType}"`);[m
[31m-  [m
[31m-  // List of all supported visualization types from the Visualization directory[m
[31m-  const supportedTypes = [[m
[31m-    'bar', 'line', 'pie', 'area', 'scatter', 'composed', [m
[31m-    'heatmap', 'radar', 'funnel', 'treemap', 'network', [m
[31m-    'geospatial', 'sankey', 'table'[m
[31m-  ];[m
[31m-  [m
[31m-  // Check if the mapped type is supported[m
[31m-  if (supportedTypes.includes(mappedType)) {[m
[31m-    console.log(`[DEBUG] Type "${mappedType}" is supported`);[m
[31m-    return mappedType;[m
[31m-  }[m
[31m-  [m
[31m-  // If not supported, log a warning and return a default[m
[31m-  console.warn(`[Visualization Type] Unsupported type: "${type}" (mapped to "${mappedType}"). Falling back to "bar".`);[m
[31m-  return 'bar';[m
[31m-}[m
[31m-[m
[31m-// Loading placeholder for lazy-loaded components[m
[31m-const VisualizationLoader = () => ([m
[31m-  <div className="animate-pulse rounded-lg overflow-hidden">[m
[31m-    <div className="h-64 bg-gray-200 dark:bg-gray-700"></div>[m
[31m-    <div className="h-4 mt-3 bg-gray-200 dark:bg-gray-700 w-3/4 rounded"></div>[m
[31m-    <div className="h-3 mt-2 bg-gray-200 dark:bg-gray-700 w-1/2 rounded"></div>[m
[31m-  </div>[m
[31m-);[m
[31m-[m
[31m-// Icons[m
[31m-// Step type icons imported from AnalyticalStep[m
[31m-const ChartBarIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M3 13.125C3 12.504 3.504 12 4.125 12h2.25c.621 0 1.125.504 1.125 1.125v6.75C7.5 20.496 6.996 21 6.375 21h-2.25A1.125 1.125 0 0 1 3 19.875v-6.75ZM9.75 8.625c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v11.25c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V8.625ZM16.5 4.125c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125v15.75c0 .621-.504 1.125-1.125 1.125h-2.25a1.125 1.125 0 0 1-1.125-1.125V4.125Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const FilterIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M12 3c2.755 0 5.455.232 8.083.678.533.09.917.556.917 1.096v1.044a2.25 2.25 0 0 1-.659 1.591l-5.432 5.432a2.25 2.25 0 0 0-.659 1.591v2.927a2.25 2.25 0 0 1-1.244 2.013L9.75 21v-6.568a2.25 2.25 0 0 0-.659-1.591L3.659 7.409A2.25 2.25 0 0 1 3 5.818V4.774c0-.54.384-1.006.917-1.096A48.32 48.32 0 0 1 12 3Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const AggregateIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M7.5 14.25v2.25m3-4.5v4.5m3-6.75v6.75m3-9v9M6 20.25h12A2.25 2.25 0 0 0 20.25 18V6A2.25 2.25 0 0 0 18 3.75H6A2.25 2.25 0 0 0 3.75 6v12A2.25 2.25 0 0 0 6 20.25Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const SortIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M3 4.5h14.25M3 9h9.75M3 13.5h5.25m5.25-.75L17.25 9m0 0L21 12.75M17.25 9v12" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const GroupIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M2.25 7.125C2.25 6.504 2.754 6 3.375 6h6c.621 0 1.125.504 1.125 1.125v3.75c0 .621-.504 1.125-1.125 1.125h-6a1.125 1.125 0 0 1-1.125-1.125v-3.75ZM14.25 8.625c0-.621.504-1.125 1.125-1.125h5.25c.621 0 1.125.504 1.125 1.125v8.25c0 .621-.504 1.125-1.125 1.125h-5.25a1.125 1.125 0 0 1-1.125-1.125v-8.25ZM3.75 16.125c0-.621.504-1.125 1.125-1.125h5.25c.621 0 1.125.504 1.125 1.125v2.25c0 .621-.504 1.125-1.125 1.125h-5.25a1.125 1.125 0 0 1-1.125-1.125v-2.25Z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const InsightIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M12 18v-5.25m0 0a6.01 6.01 0 0 0 1.5-.189m-1.5.189a6.01 6.01 0 0 1-1.5-.189m3.75 7.478a12.06 12.06 0 0 1-4.5 0m3.75 2.383a14.406 14.406 0 0 1-3 0M14.25 18v-.192c0-.983.658-1.823 1.508-2.316a7.5 7.5 0 1 0-7.517 0c.85.493 1.509 1.333 1.509 2.316V18" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const CompareIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M7.5 21 3 16.5m0 0L7.5 12M3 16.5h13.5m0-13.5L21 7.5m0 0L16.5 12M21 7.5H7.5" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-const TableIcon = () => ([m
[31m-  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">[m
[31m-    <path strokeLinecap="round" strokeLinejoin="round" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />[m
[31m-  </svg>[m
[31m-);[m
[31m-[m
[31m-export interface AnalyticalStep {[m
[31m-  id: string;[m
[31m-  type: string;[m
[31m-  description: string;[m
[31m-  order: number;[m
[31m-  data?: any;[m
[31m-  content?: string;[m
[31m-  code?: string;[m
[31m-  insights?: string[];[m
[31m-  metrics?: Array<{label: string, value: string | number}>;[m
[31m-  visualization?: {[m
[31m-    type: string;[m
[31m-    config: {[m
[31m-      data?: any[];[m
[31m-      xKey?: string;[m
[31m-      yKey?: string;[m
[31m-      series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-      labels?: { title?: string; xAxis?: string; yAxis?: string };[m
[31m-      options?: Record<string, any>;[m
[31m-    };[m
[31m-  };[m
[31m-  // Add multiple visualizations support[m
[31m-  visualizations?: Array<{[m
[31m-    id: string;[m
[31m-    type: string;[m
[31m-    title: string;[m
[31m-    description?: string;[m
[31m-    config: {[m
[31m-      data?: any[];[m
[31m-      xKey?: string;[m
[31m-      yKey?: string;[m
[31m-      series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-      labels?: { title?: string; xAxis?: string; yAxis?: string };[m
[31m-      options?: Record<string, any>;[m
[31m-    };[m
[31m-  }>;[m
[31m-  recommendations?: string[];[m
[31m-  actionableInsights?: string[];[m
[31m-}[m
[31m-[m
[31m-interface EnhancedStepByStepVisualizationProps {[m
[31m-  steps: AnalyticalStep[];[m
[31m-  autoPlay?: boolean;[m
[31m-  autoPlayDelay?: number;[m
[31m-  onComplete?: () => void;[m
[31m-  onStepChange?: (stepIndex: number) => void;[m
[31m-  initialStep?: number;[m
[31m-  dataSourceType?: string;[m
[31m-  insights?: string[];[m
[31m-  summary?: string;[m
[31m-  visualizationData?: {[m
[31m-    data: any[];[m
[31m-    type: string;[m
[31m-    xKey?: string;[m
[31m-    yKey?: string;[m
[31m-    series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-    title?: string;[m
[31m-    xAxisLabel?: string;[m
[31m-    yAxisLabel?: string;[m
[31m-    preserveType?: boolean;[m
[31m-    options?: {[m
[31m-      forceChartType?: string;[m
[31m-      isPieChart?: boolean;[m
[31m-      useDirectColorAssignment?: boolean;[m
[31m-      useMultipleColors?: boolean;[m
[31m-      [key: string]: any;[m
[31m-    };[m
[31m-  } | null;[m
[31m-  // Add support for multiple visualizations[m
[31m-  visualizationsData?: Array<{[m
[31m-    id: string;[m
[31m-    data: any[];[m
[31m-    type: string;[m
[31m-    xKey?: string;[m
[31m-    yKey?: string;[m
[31m-    series?: Array<{ dataKey: string; name?: string; color?: string; type?: string }>;[m
[31m-    title?: string;[m
[31m-    description?: string;[m
[31m-    xAxisLabel?: string;[m
[31m-    yAxisLabel?: string;[m
[31m-    preserveType?: boolean;[m
[31m-    options?: {[m
[31m-      forceChartType?: string;[m
[31m-      isPieChart?: boolean;[m
[31m-      useDirectColorAssignment?: boolean;[m
[31m-      useMultipleColors?: boolean;[m
[31m-      [key: string]: any;[m
[31m-    };[m
[31m-  }>;[m
[31m-  recommendations?: string[];[m
[31m-  actionableInsights?: string[];[m
[31m-}[m
[31m-[m
[31m-// Define a context for steps data to be used by child components[m
[31m-interface StepContextType {[m
[31m-  dataSourceType: string;[m
[31m-  steps: AnalyticalStep[];[m
[31m-}[m
[31m-[m
[31m-const StepContext = React.createContext<StepContextType | null>(null);[m
[31m-[m
[31m-// Initialize DataProcessingService[m
[31m-const dataProcessingService = new DataProcessingService();[m
[31m-[m
[31m-export const EnhancedStepByStepVisualization: React.FC<EnhancedStepByStepVisualizationProps> = ({[m
[31m-  steps: initialSteps = [],[m
[31m-  autoPlay = false,[m
[31m-  autoPlayDelay = 2000,[m
[31m-  onComplete,[m
[31m-  onStepChange,[m
[31m-  initialStep = 0,[m
[31m-  dataSourceType = 'unknown',[m
[31m-  insights = [],[m
[31m-  summary = '',[m
[31m-  visualizationData = null,[m
[31m-  visualizationsData = [][m
[31m-}) => {[m
[31m-  // State for steps[m
[31m-  const [steps, setSteps] = useState<AnalyticalStep[]>(initialSteps);[m
[31m-  const [expandedSteps, setExpandedSteps] = useState<string[]>([]);[m
[31m-  const [isReady, setIsReady] = useState(false);[m
[31m-  const [currentStepIndex, setCurrentStepIndex] = useState(initialStep);[m
[31m-  const [recommendations, setRecommendations] = useState<string[]>([]);[m
[31m-  // Current slide for visualization[m
[31m-  const [currentSlide, setCurrentSlide] = useState(0);[m
[31m-  // Local state for visualizations data[m
[31m-  const [localVisualizationsData, setLocalVisualizationsData] = useState<any[]>([]);[m
[31m-  // Show/hide data table toggle[m
[31m-  const [showDataTable, setShowDataTable] = useState(false);[m
[31m-  // For tracking "add to dashboard" operations[m
[31m-  const [addingToDashboard, setAddingToDashboard] = useState<string | null>(null);[m
[31m-[m
[31m-  // Get access to notification system[m
[31m-  const { showNotification } = useNotification();[m
[31m-[m
[31m-  // Refs for tracking data to avoid duplicates[m
[31m-  const visualizationDataRef = useRef<string>('');[m
[31m-  const visualizationsDataRef = useRef<string>('');[m
[31m-[m
[31m-  // Define a normalized data source type[m
[31m-  const normalizedDataSourceType = useMemo(() => {[m
[31m-    if (!dataSourceType) return 'unknown';[m
[31m-    [m
[31m-    // Map data source types to standardized format[m
[31m-    const sourceTypeMap: Record<string, string> = {[m
[31m-      'pdf': 'pdf',[m
[31m-      'excel': 'spreadsheet',[m
[31m-      'csv': 'spreadsheet',[m
[31m-      'doc': 'document',[m
[31m-      'docx': 'document',[m
[31m-      'database': 'database',[m
[31m-      'table': 'database',[m
[31m-      'sql': 'database',[m
[31m-      'api': 'api',[m
[31m-      'rest': 'api',[m
[31m-      'qdrant': 'qdrant',[m
[31m-      'vector_db': 'qdrant',[m
[31m-      'vector-db': 'qdrant',[m
[31m-      'vectordb': 'qdrant'[m
[31m-    };[m
[31m-    [m
[31m-    const normalizedType = dataSourceType.toLowerCase().replace(/[^a-z0-9_-]/g, '');[m
[31m-    return sourceTypeMap[normalizedType] || normalizedType || 'unknown';[m
[31m-  }, [dataSourceType]);[m
[31m-  [m
[31m-  console.log('Data source type received:', JSON.stringify(dataSourceType));[m
[31m-  console.log('Normalized data source type:', JSON.stringify(normalizedDataSourceType));[m
[31m-  [m
[31m-  // Completely disable mock data generation[m
[31m-  const generateSampleData = (): any[] => {[m
[31m-    // Always return an empty array - completely disable mock data[m
[31m-    return [];[m
[31m-  };[m
[31m-  [m
[31m-  // Force disable mock data completely and make it global[m
[31m-  useEffect(() => {[m
[31m-    // No need to set showMockData since we removed it[m
[31m-    [m
[31m-    // Define global variable to disable mock data across the application[m
[31m-    try {[m
[31m-      if (typeof window !== 'undefined') {[m
[31m-        (window as any).DISABLE_MOCK_DATA = true;[m
[31m-        (window as any).SHOW_TEMPLATES_DURING_THINKING = false;[m
[31m-      }[m
[31m-    } catch (e) {[m
[31m-      console.error('Failed to set global mock data flag:', e);[m
[31m-    }[m
[31m-  }, []);[m
[31m-  [m
[31m-  // Normalize data source type for consistent handling[m
[31m-  const normalizedDataSourceType = useMemo(() => {[m
[31m-    const type = (dataSourceType || '').toLowerCase();[m
[31m-    [m
[31m-    // Enhanced data source type detection with Qdrant prioritization[m
[31m-    if (type.includes('qdrant') || type.includes('vector') || type.includes('collection')) return 'qdrant';[m
[31m-    if (type.includes('pdf') || type.includes('document')) return 'pdf';[m
[31m-    if (type.includes('csv') || type.includes('excel') || type.includes('spreadsheet')) return 'excel';[m
[31m-    if (type.includes('database') || type.includes('sql')) return 'database';[m
[31m-    if (type.includes('local-files')) return 'qdrant'; // Treat local-files as Qdrant[m
[31m-    [m
[31m-    return type || 'qdrant'; // Default to Qdrant rather than unknown[m
[31m-  }, [dataSourceType]);[m
[31m-  [m
[31m-  // Log important props for debugging[m
[31m-  useEffect(() => {[m
[31m-    console.log('EnhancedStepByStepVisualization - Props received:', {[m
[31m-      stepsCount: initialSteps.length,[m
[31m-      dataSourceType,[m
[31m-      normalizedDataSourceType,[m
[31m-      hasInsights: insights.length > 0,[m
[31m-      hasSummary: !!summary,[m
[31m-      hasVisualizationData: !!visualizationData,[m
[31m-      multipleVisualizationsCount: visualizationsData?.length || 0[m
[31m-    });[m
[31m-    [m
[31m-    // Log more detailed information about the data source type[m
[31m-    console.log(`Data source type received: "${dataSourceType}"`);[m
[31m-    console.log(`Normalized data source type: "${normalizedDataSourceType}"`);[m
[31m-    [m
[31m-    if (normalizedDataSourceType === 'unknown' || normalizedDataSourceType === '') {[m
[31m-      console.warn('Non-specific data source type detected. This may affect RAG functionality.');[m
[31m-    }[m
[31m-    [m
[31m-    // Set ready state after a short delay to ensure all data is processed[m
[31m-    // Only set ready if we have actual data to display[m
[31m-    if (initialSteps.length > 0 || summary || visualizationData || (visualizationsData && visualizationsData.length > 0)) {[m
[31m-      const hasValidData = initialSteps.some(step => [m
[31m-        step.content || [m
[31m-        (step.visualization && step.visualization.config && step.visualization.config.data) ||[m
[31m-        (step.visualizations && step.visualizations.length > 0)[m
[31m-      );[m
[31m-      [m
[31m-      if (hasValidData || summary || visualizationData || (visualizationsData && visualizationsData.length > 0)) {[m
[31m-        // Set ready state after a short delay to ensure all data is processed[m
[31m-        const timer = setTimeout(() => {[m
[31m-          setIsReady(true);[m
[31m-        }, 100);[m
[31m-        return () => clearTimeout(timer);[m
[31m-      }[m
[31m-    }[m
[31m-  }, [initialSteps, dataSourceType, normalizedDataSourceType, insights, summary, visualizationData, visualizationsData]);[m
[31m-  [m
[31m-  // Create context value for steps[m
[31m-  const contextValue = useMemo<StepContextType>(() => ({[m
[31m-    dataSourceType: normalizedDataSourceType,[m
[31m-    steps[m
[31m-  }), [normalizedDataSourceType, steps]);[m
[31m-  [m
[31m-  // Add ref to track previous visualization data[m
[31m-  const visualizationDataRef = useRef<string | null>(null);[m
[31m-  [m
[31m-  // Track multiple visualizations[m
[31m-  const visualizationsDataRef = useRef<string | null>(null);[m
[31m-  [m
[31m-  // Add local state for visualizations data[m
[31m-  const [localVisualizationsData, setLocalVisualizationsData] = useState<any[]>([]);[m
[31m-  [m
[31m-  // Add current slide state for visualization navigation[m
[31m-  const [currentSlide, setCurrentSlide] = useState(0);[m
[31m-  const [showDataTable, setShowDataTable] = useState(false);[m
[31m-  [m
[31m-  // Update steps when initialSteps changes[m
[31m-  useEffect(() => {[m
[31m-    setSteps(initialSteps);[m
[31m-  }, [initialSteps]);[m
[31m-  [m
[31m-  // Create default steps if none are provided but summary is available[m
[31m-  useEffect(() => {[m
[31m-    if (initialSteps.length === 0 && summary && summary.length > 0) {[m
[31m-      console.log('Creating default step from summary content');[m
[31m-      [m
[31m-      // Create a simple default step without mock data[m
[31m-      const defaultSteps = [{[m
[31m-        id: 'default-step',[m
[31m-        type: 'info',[m
[31m-        description: 'Search Results',[m
[31m-        order: 1,[m
[31m-        content: summary,[m
[31m-        // Use empty data array - no mock data[m
[31m-        data: [][m
[31m-      }];[m
[31m-      [m
[31m-      setSteps(defaultSteps);[m
[31m-    }[m
[31m-  }, [initialSteps, summary]);[m
[31m-  [m
[31m-  // Add all visualizations from visualizationsData if provided[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationsData && [m
[31m-        visualizationsData.length > 0 && [m
[31m-        visualizationsData.every(viz => viz.data && Array.isArray(viz.data) && viz.data.length > 0)) {[m
[31m-      [m
[31m-      // Check if this visualization data already exists in steps[m
[31m-      const dataString = JSON.stringify(visualizationsData);[m
[31m-      const prevDataString = visualizationsDataRef.current;[m
[31m-      [m
[31m-      // Only add new steps if the data has changed[m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationsDataRef.current = dataString;[m
[31m-        [m
[31m-        // Create new steps for each visualization[m
[31m-        const newSteps = visualizationsData.map((vizData, index) => {[m
[31m-          // Generate meaningful insights based on the data[m
[31m-          const dataInsights = generateInsightsFromData([m
[31m-            vizData.data, [m
[31m-            vizData.type,[m
[31m-            vizData.xKey,[m
[31m-            vizData.yKey[m
[31m-          );[m
[31m-          [m
[31m-          // Respect the requested chart type[m
[31m-          const chartType = vizData.options?.forceChartType || [m
[31m-                           vizData.type || [m
[31m-                           (vizData.options?.isPieChart ? 'pie' : 'bar');[m
[31m-                           [m
[31m-          return {[m
[31m-            id: `viz-${vizData.id || Date.now() + index}`,[m
[31m-            type: 'visualization',[m
[31m-            description: vizData.description || `${vizData.type.charAt(0).toUpperCase() + vizData.type.slice(1)} Analysis`,[m
[31m-            order: steps.length + index + 1,[m
[31m-            content: `## ${vizData.title || 'Data Analysis'}\n\n` +[m
[31m-                    `${vizData.description || 'This visualization shows patterns in the data.'}\n\n` +[m
[31m-                    '```json\n' + [m
[31m-                    JSON.stringify(vizData.data, null, 2) + [m
[31m-                    '\n```',[m
[31m-            insights: dataInsights,[m
[31m-            metrics: generateMetricsFromData(vizData.data),[m
[31m-            visualization: {[m
[31m-              type: chartType,[m
[31m-              config: {[m
[31m-                data: vizData.data,[m
[31m-                xKey: vizData.xKey || (vizData.data[0] ? Object.keys(vizData.data[0])[0] : undefined),[m
[31m-                yKey: vizData.yKey || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : undefined),[m
[31m-                series: vizData.series || [[m
[31m-                  {[m
[31m-                    dataKey: vizData.yKey || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : 'value'),[m
[31m-                    name: vizData.yAxisLabel || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : 'Value')[m
[31m-                  }[m
[31m-                ],[m
[31m-                labels: {[m
[31m-                  title: vizData.title || 'Data Analysis',[m
[31m-                  xAxis: vizData.xAxisLabel || (vizData.data[0] ? Object.keys(vizData.data[0])[0] : 'Category'),[m
[31m-                  yAxis: vizData.yAxisLabel || (vizData.data[0] ? Object.keys(vizData.data[0])[1] : 'Value')[m
[31m-                },[m
[31m-                options: {[m
[31m-                  useDirectColorAssignment: true,[m
[31m-                  useMultipleColors: true,[m
[31m-                  theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-                  ...vizData.options[m
[31m-                }[m
[31m-              }[m
[31m-            }[m
[31m-          };[m
[31m-        });[m
[31m-        [m
[31m-        // Add the new steps to existing steps[m
[31m-        setSteps(prevSteps => [...prevSteps, ...newSteps]);[m
[31m-        [m
[31m-        // Auto-expand the new steps[m
[31m-        for (const step of newSteps) {[m
[31m-          setExpandedSteps(prev => [...prev, step.id]);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationsData, steps]);[m
[31m-  [m
[31m-  // Add visualization step if visualizationData is provided[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationData && [m
[31m-        visualizationData.data && [m
[31m-        Array.isArray(visualizationData.data) && [m
[31m-        visualizationData.data.length > 0 && [m
[31m-        visualizationData.type) {[m
[31m-      [m
[31m-      // Check if this visualization data already exists in steps[m
[31m-      const dataString = JSON.stringify(visualizationData.data);[m
[31m-      const prevDataString = visualizationDataRef.current;[m
[31m-      [m
[31m-      // Only add a new step if the data has changed[m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationDataRef.current = dataString;[m
[31m-        [m
[31m-        // Check if the step already exists[m
[31m-        const existingStep = steps.find(step => [m
[31m-          step.visualization && [m
[31m-          JSON.stringify(step.visualization.config.data) === dataString[m
[31m-        );[m
[31m-        [m
[31m-        if (!existingStep) {[m
[31m-          // Generate meaningful insights from the data[m
[31m-          const dataInsights = generateInsightsFromData([m
[31m-            visualizationData.data, [m
[31m-            visualizationData.type,[m
[31m-            visualizationData.xKey,[m
[31m-            visualizationData.yKey[m
[31m-          );[m
[31m-          [m
[31m-          // Respect the requested chart type[m
[31m-          const chartType = visualizationData.options?.forceChartType || [m
[31m-                           visualizationData.type || [m
[31m-                           (visualizationData.options?.isPieChart ? 'pie' : 'bar');[m
[31m-          [m
[31m-          // Create a new step with proper visualization[m
[31m-          const newStep: AnalyticalStep = {[m
[31m-            id: `viz-${Date.now()}`,[m
[31m-            type: 'visualization',[m
[31m-            description: `Data Analysis for ${visualizationData.title || 'Dataset'}`,[m
[31m-            order: steps.length + 1,[m
[31m-            content: `## ${visualizationData.title || 'Data Analysis'}\n\n` +[m
[31m-                    `This visualization reveals patterns and insights in the data.\n\n` +[m
[31m-                    '```json\n' + [m
[31m-                    JSON.stringify(visualizationData.data, null, 2) + [m
[31m-                    '\n```',[m
[31m-            insights: dataInsights,[m
[31m-            metrics: generateMetricsFromData(visualizationData.data),[m
[31m-            visualization: {[m
[31m-              type: chartType,[m
[31m-              config: {[m
[31m-                data: visualizationData.data,[m
[31m-                xKey: visualizationData.xKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : undefined),[m
[31m-                yKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : undefined),[m
[31m-                series: visualizationData.series || [[m
[31m-                  {[m
[31m-                    dataKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'value'),[m
[31m-                    name: visualizationData.title || 'Value'[m
[31m-                  }[m
[31m-                ],[m
[31m-                labels: {[m
[31m-                  title: visualizationData.title || `Data Analysis`,[m
[31m-                  xAxis: visualizationData.xAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : 'Category'),[m
[31m-                  yAxis: visualizationData.yAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'Value')[m
[31m-                },[m
[31m-                options: {[m
[31m-                  useDirectColorAssignment: true,[m
[31m-                  useMultipleColors: true,[m
[31m-                  theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-                  ...visualizationData.options[m
[31m-                }[m
[31m-              }[m
[31m-            }[m
[31m-          };[m
[31m-          [m
[31m-          // Add the new step to the steps array[m
[31m-          setSteps(prevSteps => [...prevSteps, newStep]);[m
[31m-          [m
[31m-          // Auto-expand the new step[m
[31m-          setExpandedSteps(prev => [...prev, newStep.id]);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationData, steps]);[m
[31m-  [m
[31m-  // Handle auto-advancing with useEffect[m
[31m-  useEffect(() => {[m
[31m-    // Only continue if autoplay is enabled and we're not at the end[m
[31m-    if (autoPlay && currentStepIndex < steps.length - 1) {[m
[31m-      const timer = setTimeout(() => {[m
[31m-        setCurrentStepIndex(prev => prev + 1);[m
[31m-      }, autoPlayDelay);[m
[31m-      [m
[31m-      return () => clearTimeout(timer);[m
[31m-    }[m
[31m-    [m
[31m-    // If we've reached the end, call onComplete[m
[31m-    if (currentStepIndex === steps.length - 1) {[m
[31m-      if (onComplete) {[m
[31m-        onComplete();[m
[31m-      }[m
[31m-    }[m
[31m-    [m
[31m-    // Notify about step change[m
[31m-    if (onStepChange) {[m
[31m-      onStepChange(currentStepIndex);[m
[31m-    }[m
[31m-  }, [currentStepIndex, steps.length, autoPlay, autoPlayDelay, onComplete, onStepChange]);[m
[31m-  [m
[31m-  // Toggle step expansion[m
[31m-  const toggleStepExpand = (stepId: string) => {[m
[31m-    setExpandedSteps(prev => [m
[31m-      prev.includes(stepId) [m
[31m-        ? prev.filter(id => id !== stepId) [m
[31m-        : [...prev, stepId][m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  // Helper function to safely render cell values[m
[31m-  const renderCellValue = (value: any): string => {[m
[31m-    if (value === null || value === undefined) return '';[m
[31m-    if (typeof value === 'object') return JSON.stringify(value);[m
[31m-    return String(value);[m
[31m-  };[m
[31m-  [m
[31m-  // Generate insights from data[m
[31m-  const generateMetricsFromData = (data: any[]): Array<{label: string, value: string | number}> => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const metrics: Array<{label: string, value: string | number}> = [];[m
[31m-    try {[m
[31m-      // Basic metrics[m
[31m-      metrics.push({ label: 'Total Records', value: data.length });[m
[31m-      [m
[31m-      // If we have numerical data, calculate statistics[m
[31m-      const numericKeys = Object.keys(data[0]).filter(key => {[m
[31m-        return !isNaN(parseFloat(data[0][key]));[m
[31m-      });[m
[31m-      [m
[31m-      if (numericKeys.length > 0) {[m
[31m-        const key = numericKeys[0]; // Use first numeric key for statistics[m
[31m-        [m
[31m-        // Calculate sum, average, max, min[m
[31m-        const values = data.map(item => parseFloat(item[key])).filter(val => !isNaN(val));[m
[31m-        if (values.length > 0) {[m
[31m-          const sum = values.reduce((a, b) => a + b, 0);[m
[31m-          const avg = sum / values.length;[m
[31m-          const max = Math.max(...values);[m
[31m-          const min = Math.min(...values);[m
[31m-          [m
[31m-          metrics.push({ label: 'Total Sum', value: sum.toFixed(2) });[m
[31m-          metrics.push({ label: 'Average', value: avg.toFixed(2) });[m
[31m-          metrics.push({ label: 'Maximum', value: max });[m
[31m-          metrics.push({ label: 'Minimum', value: min });[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // Add data source specific metrics[m
[31m-      if (data[0].type) {[m
[31m-        // Count by type if available[m
[31m-        const typeCounts: Record<string, number> = {};[m
[31m-        data.forEach(item => {[m
[31m-          typeCounts[item.type] = (typeCounts[item.type] || 0) + 1;[m
[31m-        });[m
[31m-        [m
[31m-        const primaryType = Object.entries(typeCounts)[m
[31m-          .sort((a, b) => b[1] - a[1])[m
[31m-          .map(([type, count]) => ({ type, count }))[0];[m
[31m-          [m
[31m-        if (primaryType) {[m
[31m-          metrics.push({ [m
[31m-            label: 'Primary Type', [m
[31m-            value: `${primaryType.type} (${primaryType.count})` [m
[31m-          });[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating metrics:', error);[m
[31m-    }[m
[31m-    [m
[31m-    return metrics;[m
[31m-  };[m
[31m-  [m
[31m-  // Add visualization to dashboard[m
[31m-  const handleAddToDashboard = useCallback(async (visualization: any, vizId: string) => {[m
[31m-    if (!visualization || !normalizedDataSourceType) return;[m
[31m-[m
[31m-    try {[m
[31m-      console.log('Visualization data being sent to dashboard:', JSON.stringify(visualization, null, 2));[m
[31m-      [m
[31m-      // Set the current visualization as being added to dashboard[m
[31m-      setAddingToDashboard(vizId);[m
[31m-      [m
[31m-      // Create instance and call addToDashboard method[m
[31m-      const dataProcessingService = DataProcessingService.getInstance();[m
[31m-      const success = await dataProcessingService.addToDashboard(visualization);[m
[31m-      [m
[31m-      if (success) {[m
[31m-        showNotification({[m
[31m-          type: 'success',[m
[31m-          message: 'Visualization added to dashboard!'[m
[31m-        });[m
[31m-      } else {[m
[31m-        showNotification({[m
[31m-          type: 'error',[m
[31m-          message: 'Failed to add visualization to dashboard'[m
[31m-        });[m
[31m-      }[m
[31m-      [m
[31m-      // Clear the adding state[m
[31m-      setAddingToDashboard(null);[m
[31m-    } catch (error) {[m
[31m-      console.error('Error adding to dashboard:', error);[m
[31m-      showNotification({[m
[31m-        type: 'error',[m
[31m-        message: 'An error occurred while adding to dashboard'[m
[31m-      });[m
[31m-      [m
[31m-      // Clear the adding state on error[m
[31m-      setAddingToDashboard(null);[m
[31m-    }[m
[31m-  }, [normalizedDataSourceType, showNotification]);[m
[31m-  [m
[31m-  // Get appropriate icon for step type[m
[31m-  const getStepIcon = (type: string) => {[m
[31m-    switch (type.toLowerCase()) {[m
[31m-      case 'filtering':[m
[31m-        return <FilterIcon />;[m
[31m-      case 'aggregation':[m
[31m-        return <AggregateIcon />;[m
[31m-      case 'grouping':[m
[31m-        return <GroupIcon />;[m
[31m-      case 'sorting':[m
[31m-        return <SortIcon />;[m
[31m-      case 'visualization':[m
[31m-        return <ChartBarIcon />;[m
[31m-      case 'comparative':[m
[31m-        return <CompareIcon />;[m
[31m-      case 'insights':[m
[31m-        return <InsightIcon />;[m
[31m-      case 'table':[m
[31m-        return <TableIcon />;[m
[31m-      default:[m
[31m-        return <TableIcon />;[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Get background color based on step type[m
[31m-  const getStepBgColor = (type: string) => {[m
[31m-    switch (type.toLowerCase()) {[m
[31m-      case 'filtering':[m
[31m-        return 'border-blue-300 bg-blue-50 dark:border-blue-700 dark:bg-blue-900/30';[m
[31m-      case 'aggregation':[m
[31m-        return 'border-indigo-300 bg-indigo-50 dark:border-indigo-700 dark:bg-indigo-900/30';[m
[31m-      case 'grouping':[m
[31m-        return 'border-purple-300 bg-purple-50 dark:border-purple-700 dark:bg-purple-900/30';[m
[31m-      case 'sorting':[m
[31m-        return 'border-green-300 bg-green-50 dark:border-green-700 dark:bg-green-900/30';[m
[31m-      case 'visualization':[m
[31m-        return 'border-yellow-300 bg-yellow-50 dark:border-yellow-700 dark:bg-yellow-900/30';[m
[31m-      case 'comparative':[m
[31m-        return 'border-orange-300 bg-orange-50 dark:border-orange-700 dark:bg-orange-900/30';[m
[31m-      case 'insights':[m
[31m-        return 'border-pink-300 bg-pink-50 dark:border-pink-700 dark:bg-pink-900/30';[m
[31m-      case 'table':[m
[31m-        return 'border-gray-300 bg-gray-50 dark:border-gray-700 dark:bg-gray-800';[m
[31m-      default:[m
[31m-        return 'border-gray-200 bg-white dark:border-gray-700 dark:bg-gray-800';[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Enhanced function to extract and process step data from Qdrant[m
[31m-  const processStepData = (step: AnalyticalStep) => {[m
[31m-    if (!step.data && !step.content) {[m
[31m-      return { hasData: false, tableData: null as any[] | null, processed: step.content || '', tables: [] };[m
[31m-    }[m
[31m-    [m
[31m-    try {[m
[31m-      // Initialize an array to store extracted tables[m
[31m-      const tables: Array<{title: string, data: any[], content: string}> = [];[m
[31m-      [m
[31m-      // Get the processed content (use content if available, otherwise use description)[m
[31m-      let processed = step.content || step.description || '';[m
[31m-      [m
[31m-      // Check if content has actual table data structures (arrays of objects)[m
[31m-      let tableData: any[] | null = null;[m
[31m-      [m
[31m-      // Handle data directly from Qdrant if available[m
[31m-      if (step.data) {[m
[31m-        // If data is a string, try to parse it as JSON[m
[31m-        if (typeof step.data === 'string') {[m
[31m-          try {[m
[31m-            const parsedData = JSON.parse(step.data);[m
[31m-            if (Array.isArray(parsedData) && parsedData.length > 0) {[m
[31m-              tableData = parsedData;[m
[31m-            }[m
[31m-          } catch (e) {[m
[31m-            console.log('Data is not valid JSON, using as text', step.data);[m
[31m-            // If it's not valid JSON, append it to the processed content[m
[31m-            processed += '\n\n' + step.data;[m
[31m-          }[m
[31m-        } [m
[31m-        // If data is an array, use it directly[m
[31m-        else if (Array.isArray(step.data)) {[m
[31m-          tableData = step.data;[m
[31m-        } [m
[31m-        // If data is an object, convert to array with single item[m
[31m-        else if (typeof step.data === 'object' && step.data !== null) {[m
[31m-          tableData = [step.data];[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // Search for markdown tables in the content[m
[31m-      const markdownTables = TableFormatter.extractTablesFromMarkdown(processed);[m
[31m-      if (markdownTables && markdownTables.length > 0) {[m
[31m-        // If we found markdown tables and don't already have tableData, use the first one[m
[31m-        if (!tableData && markdownTables[0].length > 0) {[m
[31m-          tableData = markdownTables[0];[m
[31m-        }[m
[31m-        [m
[31m-        // Add all markdown tables to our tables array[m
[31m-        markdownTables.forEach((tableRows, index) => {[m
[31m-          if (tableRows.length > 0) {[m
[31m-            tables.push({[m
[31m-              title: `Table ${index + 1}`,[m
[31m-              data: tableRows,[m
[31m-              content: TableFormatter.toMarkdownTable(tableRows)[m
[31m-            });[m
[31m-          }[m
[31m-        });[m
[31m-      }[m
[31m-      [m
[31m-      return { [m
[31m-        hasData: tableData !== null || tables.length > 0, [m
[31m-        tableData, [m
[31m-        processed, [m
[31m-        tables [m
[31m-      };[m
[31m-    } catch (e) {[m
[31m-      console.error('Error processing step data:', e);[m
[31m-      return { [m
[31m-        hasData: false, [m
[31m-        tableData: null, [m
[31m-        processed: step.content || step.description || '', [m
[31m-        tables: [] [m
[31m-      };[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Enhance the renderStep function to properly display tables[m
[31m-  // @ts-ignore - This function is currently unused but kept for future use[m
[31m-  // eslint-disable-next-line @typescript-eslint/no-unused-vars[m
[31m-  const renderStep = useCallback((step: AnalyticalStep, index: number) => {[m
[31m-    const isExpanded = expandedSteps.includes(step.id);[m
[31m-    const stepIcon = getStepIcon(step.type);[m
[31m-    const stepBgColor = getStepBgColor(step.type);[m
[31m-    [m
[31m-    // Process the step data to extract tables and format content[m
[31m-    const { processed } = processStepData(step);[m
[31m-    [m
[31m-    // Format the step type to lowercase for display[m
[31m-    const displayType = step.type.toLowerCase();[m
[31m-    [m
[31m-    // Clean up the description text by removing all numbering, markdown, and type prefixes[m
[31m-    let cleanDescription = step.description[m
[31m-      .replace(/^\d+\.\s*/, '') // Remove leading numbers like "1. "[m
[31m-      .replace(/^\d+\.\s*\d+\.\s*/, '') // Remove double numbering like "1. 1. "[m
[31m-      .replace(/\*\*([^*]+)\*\*:?\s*/g, '') // Remove markdown bold patterns with colon like "**AGGREGATION:** "[m
[31m-      .replace(new RegExp(`^${step.type}:\\s*`, 'i'), '') // Remove type prefix like "TYPE: " (case insensitive)[m
[31m-      .replace(new RegExp(`^${displayType}:\\s*`, 'i'), '') // Remove lowercase type prefix[m
[31m-      .replace(new RegExp(`^${displayType.toUpperCase()}:\\s*`, 'i'), '') // Remove uppercase type[m
[31m-      .trim();[m
[31m-    [m
[31m-    // Remove any duplicate content between type and description[m
[31m-    if (cleanDescription.startsWith('First, I reviewed')) {[m
[31m-      // If it starts with a common pattern, ensure it's only shown once[m
[31m-      cleanDescription = cleanDescription.replace(/^\d+\.\s*/, ''); // Remove any remaining numbers[m
[31m-    }[m
[31m-    [m
[31m-    // Extract the original text from the processed content for the results section[m
[31m-    const originalText = processed || step.description;[m
[31m-    [m
[31m-    return ([m
[31m-      <motion.div [m
[31m-        key={step.id}[m
[31m-        initial={{ opacity: 0, y: 10 }}[m
[31m-        animate={{ opacity: 1, y: 0 }}[m
[31m-        transition={{ duration: 0.3, ease: "easeOut" }}[m
[31m-        className={`mb-6 border rounded-xl overflow-hidden bg-white dark:bg-gray-800/50 shadow-sm[m
[31m-                   ${isExpanded ? 'transition-all duration-500 ease-in-out' : 'hover:shadow-md transition-all'}`}[m
[31m-      >[m
[31m-        <div [m
[31m-          className="px-5 py-4 flex justify-between items-center cursor-pointer"[m
[31m-          onClick={() => toggleStepExpand(step.id)}[m
[31m-        >[m
[31m-          <div className="flex items-center space-x-3">[m
[31m-            <div className={`p-2 rounded-lg ${stepBgColor} text-white flex items-center justify-center`}>[m
[31m-              {stepIcon}[m
[31m-            </div>[m
[31m-            <div>[m
[31m-              <div className="font-medium text-gray-900 dark:text-white">[m
[31m-                <span className="text-lg font-bold">{index + 1}.</span> <span className="text-purple-600 dark:text-purple-400 font-medium">{displayType}:</span> {cleanDescription}[m
[31m-              </div>[m
[31m-              {!isExpanded && ([m
[31m-                <div className="text-xs text-gray-500 dark:text-gray-400 max-w-[500px] truncate">[m
[31m-                  {processed?.substring(0, 100)}[m
[31m-                  {processed && processed.length > 100 ? '...' : ''}[m
[31m-                </div>[m
[31m-              )}[m
[31m-            </div>[m
[31m-          </div>[m
[31m-          <div>[m
[31m-            <button[m
[31m-              className="p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700"[m
[31m-              onClick={(e) => {[m
[31m-                e.stopPropagation();[m
[31m-                toggleStepExpand(step.id);[m
[31m-              }}[m
[31m-            >[m
[31m-              {isExpanded ? ([m
[31m-                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">[m
[31m-                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />[m
[31m-                </svg>[m
[31m-              ) : ([m
[31m-                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-gray-500 dark:text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">[m
[31m-                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />[m
[31m-                </svg>[m
[31m-              )}[m
[31m-            </button>[m
[31m-          </div>[m
[31m-        </div>[m
[31m-        [m
[31m-        {isExpanded && ([m
[31m-          <div className="px-5 pb-5 pt-3">[m
[31m-            <div>[m
[31m-              <div className="bg-gray-50 dark:bg-gray-800/50 rounded-lg border border-gray-200 dark:border-gray-700 p-4">[m
[31m-                <h3 className="text-md font-medium mb-3 text-gray-800 dark:text-gray-200">Analysis Details</h3>[m
[31m-                [m
[31m-                <p className="mb-4 text-sm text-gray-700 dark:text-gray-300">[m
[31m-                  This {displayType} analysis examines relationships and patterns in the data to extract meaningful business insights.[m
[31m-                </p>[m
[31m-                [m
[31m-                <div className="bg-purple-50 dark:bg-purple-900/20 p-3 rounded-lg border border-purple-100 dark:border-purple-800 mb-4">[m
[31m-                  <p className="text-sm text-purple-700 dark:text-purple-300">[m
[31m-                    <span className="font-medium">{displayType} Results:</span> {index + 1}. {originalText.includes("**") ? originalText : `**${step.type.toUpperCase()}:** ${cleanDescription}`}[m
[31m-                  </p>[m
[31m-                </div>[m
[31m-                [m
[31m-                <div className="mt-4">[m
[31m-                  <h4 className="text-sm font-medium text-gray-800 dark:text-gray-200 mb-2">Data Preview</h4>[m
[31m-                  <div className="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">[m
[31m-                    <TableVisualization [m
[31m-                      data={step.data && Array.isArray(step.data) && step.data.length > 0 ? step.data : generateSampleData()}[m
[31m-                      title=""[m
[31m-                      maxHeight="250px"[m
[31m-                      pagination={false}[m
[31m-                      pageSize={5}[m
[31m-                      responsive={true}[m
[31m-                      className="w-full"[m
[31m-                      style={{ fontSize: '0.875rem' }}[m
[31m-                    />[m
[31m-                  </div>[m
[31m-                </div>[m
[31m-              </div>[m
[31m-            </div>[m
[31m-          </div>[m
[31m-        )}[m
[31m-      </motion.div>[m
[31m-    );[m
[31m-  }, [expandedSteps, toggleStepExpand, getStepIcon, getStepBgColor, handleAddToDashboard]);[m
[31m-  [m
[31m-  // New function to render a visualization with proper chart type handling[m
[31m-  const renderVisualization = (vizConfig: any, height = 400) => {[m
[31m-    // Get the requested chart type from the configuration[m
[31m-    const requestedType = vizConfig.type || 'bar';[m
[31m-    [m
[31m-    // Check URL for forced chart type[m
[31m-    let finalChartType = requestedType;[m
[31m-    try {[m
[31m-      const urlParams = new URLSearchParams(window.location.search);[m
[31m-      const forcedChartType = urlParams.get('chartType');[m
[31m-      if (forcedChartType) {[m
[31m-        console.log(`[Visualization] Overriding chart type with URL parameter: ${forcedChartType}`);[m
[31m-        finalChartType = forcedChartType;[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error checking URL parameters:', error);[m
[31m-    }[m
[31m-    [m
[31m-    // Respect specific options if provided[m
[31m-    if (vizConfig.options?.forceChartType) {[m
[31m-      finalChartType = vizConfig.options.forceChartType;[m
[31m-      console.log(`[Visualization] Using forced chart type from options: ${finalChartType}`);[m
[31m-    }[m
[31m-    [m
[31m-    // Apply the validated chart type[m
[31m-    const validatedType = validateVisualizationType(finalChartType);[m
[31m-    console.log(`[Visualization] Final chart type: ${validatedType} (requested: ${requestedType})`);[m
[31m-    [m
[31m-    // Define normalized chart types mapping[m
[31m-    const chartTypeMap: Record<string, string> = {[m
[31m-      'bar': 'bar',[m
[31m-      'column': 'bar',[m
[31m-      'stacked-bar': 'stackedBar',[m
[31m-      'stacked_bar': 'stackedBar',[m
[31m-      'horizontal-bar': 'horizontalBar',[m
[31m-      'horizontal_bar': 'horizontalBar',[m
[31m-      'line': 'line',[m
[31m-      'area': 'area',[m
[31m-      'enhanced-area': 'enhancedArea',[m
[31m-      'enhanced_area': 'enhancedArea',[m
[31m-      'pie': 'pie',[m
[31m-      'donut': 'donut',[m
[31m-      'doughnut': 'donut',[m
[31m-      'scatter': 'scatter',[m
[31m-      'radar': 'radar',[m
[31m-      'heatmap': 'heatmap',[m
[31m-      'funnel': 'funnel',[m
[31m-      'treemap': 'treemap',[m
[31m-      'sankey': 'sankey',[m
[31m-      'geospatial': 'geospatial',[m
[31m-      'network': 'network',[m
[31m-      'graph': 'network'[m
[31m-    };[m
[31m-    [m
[31m-    // Normalize the validated type[m
[31m-    const normalizedType = chartTypeMap[validatedType.toLowerCase()] || 'bar';[m
[31m-    [m
[31m-    // Create the visualization config with the correct chart type[m
[31m-    const config = {[m
[31m-      ...vizConfig,[m
[31m-      type: normalizedType,[m
[31m-      options: {[m
[31m-        ...(vizConfig.options || {}),[m
[31m-        theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-        // Add appropriate options based on chart type[m
[31m-        ...(normalizedType === 'pie' || normalizedType === 'donut' ? {[m
[31m-          isPieChart: true,[m
[31m-          useDirectColorAssignment: true,[m
[31m-          useMultipleColors: true[m
[31m-        } : {})[m
[31m-      }[m
[31m-    };[m
[31m-    [m
[31m-    // Generate insights specifically for this visualization[m
[31m-    const vizInsights = vizConfig.data && Array.isArray(vizConfig.data) && vizConfig.data.length > 0 [m
[31m-      ? generateInsightsFromData(vizConfig.data, normalizedType, vizConfig.xKey, vizConfig.yKey).slice(0, 3)[m
[31m-      : [];[m
[31m-    [m
[31m-    // Use the ImportedVisualization component from the main Visualization module[m
[31m-    // This allows us to leverage the full range of chart types supported by the app[m
[31m-    return ([m
[31m-      <div className="slide-visualization">[m
[31m-        {/* Key insights at the top of the visualization */}[m
[31m-        {vizInsights.length > 0 && ([m
[31m-          <div className="key-insights-panel mb-4 bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg border border-blue-100 dark:border-blue-800/30">[m
[31m-            <h5 className="text-sm font-medium text-blue-800 dark:text-blue-300 mb-2 flex items-center">[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4 mr-1">[m
[31m-                <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />[m
[31m-                <path fillRule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z" clipRule="evenodd" />[m
[31m-              </svg>[m
[31m-              Key Insights[m
[31m-            </h5>[m
[31m-            <ul className="space-y-1.5">[m
[31m-              {vizInsights.map((insight, idx) => ([m
[31m-                <li key={idx} className="flex items-start text-sm text-blue-700 dark:text-blue-200">[m
[31m-                  <span className="text-blue-500 dark:text-blue-400 mr-2 mt-0.5 font-bold">â€¢</span>[m
[31m-                  <span>{insight}</span>[m
[31m-                </li>[m
[31m-              ))}[m
[31m-            </ul>[m
[31m-          </div>[m
[31m-        )}[m
[31m-        [m
[31m-        {/* Chart visualization */}[m
[31m-        <div className="chart-container relative" style={{ height }}>[m
[31m-          <Suspense fallback={<VisualizationLoader />}>[m
[31m-            <LazyVisualizationWrapper[m
[31m-              config={config}[m
[31m-              height={height}[m
[31m-              width="100%"[m
[31m-              theme={document.documentElement.classList.contains('dark') ? 'dark' : 'light'}[m
[31m-            />[m
[31m-          </Suspense>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  // Generate domain-specific insights based on data type[m
[31m-  const generateDomainSpecificInsights = (data: any[], dataType: string): string[] => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const insights: string[] = [];[m
[31m-    [m
[31m-    try {[m
[31m-      if (dataType === 'sales') {[m
[31m-        // Sales-specific insights[m
[31m-        insights.push(`Sales data analysis reveals patterns in performance across different segments and time periods.`);[m
[31m-        insights.push(`Consider analyzing year-over-year growth rates to identify long-term trends and seasonality effects.`);[m
[31m-        insights.push(`Examining regional distribution of sales could reveal untapped market opportunities.`);[m
[31m-      } else if (dataType === 'financial') {[m
[31m-        // Financial insights[m
[31m-        insights.push(`Financial data analysis can help identify cost-saving opportunities and revenue growth patterns.`);[m
[31m-        insights.push(`Quarter-over-quarter comparisons could highlight seasonal trends and annual growth patterns.`);[m
[31m-        insights.push(`Expense-to-revenue ratios may reveal operational efficiency opportunities.`);[m
[31m-      } else {[m
[31m-        // General insights[m
[31m-        insights.push(`Analysis of data patterns shows distribution characteristics worth exploring further.`);[m
[31m-        insights.push(`Consider segmenting this data to identify any hidden correlation patterns.`);[m
[31m-        insights.push(`Regular trend analysis could help identify seasonal or periodic variations.`);[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating domain-specific insights:', error);[m
[31m-    }[m
[31m-    [m
[31m-    return insights;[m
[31m-  };[m
[31m-  [m
[31m-  // Generate more meaningful insights from data[m
[31m-  const generateInsightsFromData = (data: any[], type: string, xKey?: string, yKey?: string): string[] => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const insights: string[] = [];[m
[31m-    try {[m
[31m-      // Use xKey and yKey if provided, otherwise use first two keys[m
[31m-      const actualXKey = xKey || Object.keys(data[0])[0];[m
[31m-      const actualYKey = yKey || Object.keys(data[0])[1];[m
[31m-      [m
[31m-      // Find max and min values[m
[31m-      const values = data.map(item => parseFloat(item[actualYKey])).filter(val => !isNaN(val));[m
[31m-      if (values.length > 0) {[m
[31m-        const maxValue = Math.max(...values);[m
[31m-        const minValue = Math.min(...values);[m
[31m-        const maxItem = data.find(item => parseFloat(item[actualYKey]) === maxValue);[m
[31m-        const minItem = data.find(item => parseFloat(item[actualYKey]) === minValue);[m
[31m-        const sum = values.reduce((a, b) => a + b, 0);[m
[31m-        const avg = sum / values.length;[m
[31m-        [m
[31m-        // Calculate standard deviation to measure variability[m
[31m-        const variance = values.reduce((v, value) => v + Math.pow(value - avg, 2), 0) / values.length;[m
[31m-        const stdDev = Math.sqrt(variance);[m
[31m-        const relativeStdDev = (stdDev / avg) * 100; // CV - coefficient of variation[m
[31m-        [m
[31m-        // Detailed insights about the data values[m
[31m-        if (maxItem) {[m
[31m-          insights.push(`The highest ${actualYKey} is ${maxValue.toFixed(2)} for ${maxItem[actualXKey]}, representing ${((maxValue / sum) * 100).toFixed(1)}% of the total.`);[m
[31m-        }[m
[31m-        [m
[31m-        if (minItem) {[m
[31m-          insights.push(`The lowest ${actualYKey} is ${minValue.toFixed(2)} for ${minItem[actualXKey]}, representing ${((minValue / sum) * 100).toFixed(1)}% of the total.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Median analysis for distribution insights[m
[31m-        const sortedValues = [...values].sort((a, b) => a - b);[m
[31m-        const midIndex = Math.floor(sortedValues.length / 2);[m
[31m-        const median = sortedValues.length % 2 === 0 [m
[31m-          ? (sortedValues[midIndex - 1] + sortedValues[midIndex]) / 2 [m
[31m-          : sortedValues[midIndex];[m
[31m-        [m
[31m-        // Compare mean and median for distribution analysis[m
[31m-        const meanMedianDiff = ((avg - median) / avg) * 100;[m
[31m-        [m
[31m-        // Distribution insights based on standard deviation and mean-median comparison[m
[31m-        if (Math.abs(meanMedianDiff) > 20) {[m
[31m-          insights.push(`The distribution is skewed (mean: ${avg.toFixed(2)}, median: ${median.toFixed(2)}), suggesting outliers are affecting the average.`);[m
[31m-        } else if (relativeStdDev > 50) {[m
[31m-          insights.push(`The data shows high variability with a coefficient of variation of ${relativeStdDev.toFixed(1)}%, indicating diverse values.`);[m
[31m-        } else if (relativeStdDev < 10) {[m
[31m-          insights.push(`The data shows low variability with a coefficient of variation of ${relativeStdDev.toFixed(1)}%, indicating consistent values.`);[m
[31m-        } else {[m
[31m-          insights.push(`The data shows moderate variability with a coefficient of variation of ${relativeStdDev.toFixed(1)}%.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Distribution insights[m
[31m-        const aboveAvg = values.filter(val => val > avg).length;[m
[31m-        const aboveAvgPercent = Math.round(aboveAvg / values.length * 100);[m
[31m-        insights.push(`${aboveAvg} items (${aboveAvgPercent}%) are above the average ${actualYKey} of ${avg.toFixed(2)}.`);[m
[31m-        [m
[31m-        // Distribution type insights[m
[31m-        if (aboveAvgPercent < 30) {[m
[31m-          insights.push(`The ${actualYKey} distribution is skewed, with a small number of high-value items dominating the total.`);[m
[31m-        } else if (aboveAvgPercent > 70) {[m
[31m-          insights.push(`The ${actualYKey} distribution is heavily weighted toward the high end, with most items having above-average values.`);[m
[31m-        } else {[m
[31m-          insights.push(`The ${actualYKey} distribution is relatively balanced, with a mix of high and low values.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Concentration analysis[m
[31m-        const topThreeSum = values.sort((a, b) => b - a).slice(0, 3).reduce((a, b) => a + b, 0);[m
[31m-        const topThreePercent = (topThreeSum / sum) * 100;[m
[31m-        if (values.length > 3) {[m
[31m-          insights.push(`The top 3 items represent ${topThreePercent.toFixed(1)}% of the total ${actualYKey}, indicating a ${topThreePercent > 70 ? 'highly concentrated' : topThreePercent > 50 ? 'moderately concentrated' : 'diversified'} distribution.`);[m
[31m-        }[m
[31m-        [m
[31m-        // Pattern analysis based on chart type[m
[31m-        if (type === 'line' || type === 'area') {[m
[31m-          // Check for trend patterns in sequential data[m
[31m-          let increasingCount = 0;[m
[31m-          let decreasingCount = 0;[m
[31m-          [m
[31m-          for (let i = 1; i < values.length; i++) {[m
[31m-            if (values[i] > values[i-1]) increasingCount++;[m
[31m-            else if (values[i] < values[i-1]) decreasingCount++;[m
[31m-          }[m
[31m-          [m
[31m-          const trendPercentage = Math.max(increasingCount, decreasingCount) / (values.length - 1) * 100;[m
[31m-          [m
[31m-          if (trendPercentage > 70) {[m
[31m-            if (increasingCount > decreasingCount) {[m
[31m-              insights.push(`The data shows a clear upward trend, with ${trendPercentage.toFixed(0)}% of sequential points increasing.`);[m
[31m-            } else {[m
[31m-              insights.push(`The data shows a clear downward trend, with ${trendPercentage.toFixed(0)}% of sequential points decreasing.`);[m
[31m-            }[m
[31m-          } else if (trendPercentage > 50) {[m
[31m-            if (increasingCount > decreasingCount) {[m
[31m-              insights.push(`The data shows a moderate upward trend, with some fluctuations.`);[m
[31m-            } else {[m
[31m-              insights.push(`The data shows a moderate downward trend, with some fluctuations.`);[m
[31m-            }[m
[31m-          } else {[m
[31m-            insights.push(`The data shows significant fluctuations without a clear directional trend.`);[m
[31m-          }[m
[31m-        } else if (type === 'pie' || type === 'donut') {[m
[31m-          // Dominance analysis for pie charts[m
[31m-          const topCategory = maxItem ? maxItem[actualXKey] : '';[m
[31m-          const topValue = maxValue;[m
[31m-          const topPercent = (topValue / sum) * 100;[m
[31m-          [m
[31m-          if (topPercent > 50) {[m
[31m-            insights.push(`${topCategory} dominates the distribution with ${topPercent.toFixed(1)}% of the total, more than all other categories combined.`);[m
[31m-          } else if (topPercent > 33) {[m
[31m-            insights.push(`${topCategory} is the leading category with ${topPercent.toFixed(1)}% of the total, showing significant prominence.`);[m
[31m-          } else if (data.length > 3) {[m
[31m-            insights.push(`The distribution is relatively fragmented across ${data.length} categories, with no single category having an overwhelming majority.`);[m
[31m-          }[m
[31m-          [m
[31m-          // Analyze even distribution[m
[31m-          const idealPerCategory = 100 / data.length;[m
[31m-          const deviation = values.reduce((sum, val) => sum + Math.abs((val / sum * 100) - idealPerCategory), 0) / data.length;[m
[31m-          [m
[31m-          if (deviation < 5) {[m
[31m-            insights.push(`The distribution is remarkably even across all categories, with minimal variation from the expected even distribution.`);[m
[31m-          } else if (deviation > 20) {[m
[31m-            insights.push(`The distribution shows significant imbalance across categories, deviating ${deviation.toFixed(1)}% from an even distribution.`);[m
[31m-          }[m
[31m-        } else if (type === 'bar' || type === 'column') {[m
[31m-          // Quartile analysis for bar charts[m
[31m-          const q1Index = Math.floor(sortedValues.length / 4);[m
[31m-          const q3Index = Math.floor(3 * sortedValues.length / 4);[m
[31m-          const q1 = sortedValues[q1Index];[m
[31m-          const q3 = sortedValues[q3Index];[m
[31m-          const iqr = q3 - q1;[m
[31m-          [m
[31m-          // Check for outliers[m
[31m-          const outlierThresholdLow = q1 - 1.5 * iqr;[m
[31m-          const outlierThresholdHigh = q3 + 1.5 * iqr;[m
[31m-          const outliers = values.filter(v => v < outlierThresholdLow || v > outlierThresholdHigh);[m
[31m-          [m
[31m-          if (outliers.length > 0) {[m
[31m-            const outlierPercent = (outliers.length / values.length) * 100;[m
[31m-            insights.push(`${outliers.length} data points (${outlierPercent.toFixed(1)}%) are statistical outliers, falling outside the expected range.`);[m
[31m-          }[m
[31m-          [m
[31m-          // Check for bimodal distribution[m
[31m-          const binSize = (maxValue - minValue) / 5; // 5 bins for analysis[m
[31m-          const bins = Array(5).fill(0);[m
[31m-          [m
[31m-          values.forEach(v => {[m
[31m-            const binIndex = Math.min(4, Math.floor((v - minValue) / binSize));[m
[31m-            bins[binIndex]++;[m
[31m-          });[m
[31m-          [m
[31m-          // Check if there are two distinct peaks[m
[31m-          const maxBin = Math.max(...bins);[m
[31m-          const maxBinIndex = bins.indexOf(maxBin);[m
[31m-          bins[maxBinIndex] = 0; // Remove the tallest peak[m
[31m-          const secondMaxBin = Math.max(...bins);[m
[31m-          const secondMaxBinIndex = bins.indexOf(secondMaxBin);[m
[31m-          [m
[31m-          if (secondMaxBin > values.length * 0.2 && Math.abs(secondMaxBinIndex - maxBinIndex) >= 2) {[m
[31m-            insights.push(`The data distribution appears bimodal, with two distinct peaks suggesting two different groups or patterns.`);[m
[31m-          }[m
[31m-        }[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating insights:', error);[m
[31m-      insights.push(`Analysis of ${data.length} data points shows patterns worth exploring.`);[m
[31m-    }[m
[31m-    [m
[31m-    return insights;[m
[31m-  };[m
[31m-  [m
[31m-  // Generate recommendations based on data[m
[31m-  const generateRecommendations = (type: string): string[] => {[m
[31m-    const recommendations: string[] = [];[m
[31m-    [m
[31m-    try {[m
[31m-      // General recommendations applicable to all data types[m
[31m-      recommendations.push('Consider segmenting the data further to identify hidden patterns and correlations.');[m
[31m-      recommendations.push('Analyze trends over time to identify seasonal patterns or long-term changes.');[m
[31m-      [m
[31m-      // Recommendations based on chart type[m
[31m-      if (type === 'pie' || type === 'donut') {[m
[31m-        recommendations.push('Combine categories below 5% into an "Other" category to improve chart readability.');[m
[31m-        recommendations.push('Consider switching to a bar chart if you have more than 7 categories for better visual comparison.');[m
[31m-        recommendations.push('Sort categories by value to highlight the relative importance of each segment.');[m
[31m-      } else if (type === 'bar' || type === 'column') {[m
[31m-        recommendations.push('Sort bars by value rather than category for easier identification of highest and lowest values.');[m
[31m-        recommendations.push('Use horizontal bars if you have many categories or long category names.');[m
[31m-        recommendations.push('Consider adding benchmark lines or thresholds to evaluate performance against targets.');[m
[31m-      } else if (type === 'line') {[m
[31m-        recommendations.push('Add trend lines or moving averages to smooth out fluctuations and reveal underlying patterns.');[m
[31m-        recommendations.push('Annotate significant data points to highlight key events or changes.');[m
[31m-        recommendations.push('Consider using dual axes for comparing metrics with different scales.');[m
[31m-      } else if (type === 'scatter') {[m
[31m-        recommendations.push('Add trendlines to visualize correlations between data points.');[m
[31m-        recommendations.push('Use color coding or size variations to add additional dimensions to your analysis.');[m
[31m-        recommendations.push('Consider clustering analysis to identify groups of similar data points.');[m
[31m-      } else if (type === 'heatmap') {[m
[31m-        recommendations.push('Adjust color scales to highlight specific ranges of values.');[m
[31m-        recommendations.push('Add annotations to explain particularly high or low values in the matrix.');[m
[31m-        recommendations.push('Consider hierarchical clustering to group similar rows and columns.');[m
[31m-      } else if (type === 'funnel' || type === 'treemap') {[m
[31m-        recommendations.push('Add percentage labels to highlight conversion rates between stages.');[m
[31m-        recommendations.push('Use consistent color coding to group related categories.');[m
[31m-        recommendations.push('Consider adding interactive tooltips to display detailed information for each segment.');[m
[31m-      }[m
[31m-      [m
[31m-      // Add data analysis recommendations[m
[31m-      recommendations.push('Examine outliers to understand exceptional cases that may provide valuable insights.');[m
[31m-      recommendations.push('Compare current data with historical benchmarks to identify significant changes or trends.');[m
[31m-      recommendations.push('Use statistical tests to validate whether observed patterns are statistically significant.');[m
[31m-      [m
[31m-      // Action-oriented recommendations[m
[31m-      recommendations.push('Create a dashboard with multiple visualizations to provide a comprehensive view of the data.');[m
[31m-      recommendations.push('Set up alerts for significant changes or anomalies in key metrics.');[m
[31m-      recommendations.push('Schedule regular data reviews to track changes over time and adjust strategies accordingly.');[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating recommendations:', error);[m
[31m-      recommendations.push('Analyze the data further to identify actionable insights and patterns.');[m
[31m-    }[m
[31m-    [m
[31m-    // Return a subset of recommendations to avoid overwhelming the user[m
[31m-    return recommendations.slice(0, 5);[m
[31m-  };[m
[31m-  [m
[31m-  // Generate a meaningful summary from the data[m
[31m-  const generateSummaryFromData = (data: any[]): string => {[m
[31m-    if (!data || data.length === 0) {[m
[31m-      return 'No data available for analysis.';[m
[31m-    }[m
[31m-    [m
[31m-    try {[m
[31m-      // Extract keys for analysis[m
[31m-      const keys = Object.keys(data[0]);[m
[31m-      const categories = data.map(item => item[keys[0]]);[m
[31m-      const valuesKey = keys[1] || 'value';[m
[31m-      const values = data.map(item => parseFloat(item[valuesKey])).filter(val => !isNaN(val));[m
[31m-      [m
[31m-      if (values.length === 0) {[m
[31m-        return `The dataset contains ${data.length} records, but no valid numerical values were found for analysis.`;[m
[31m-      }[m
[31m-      [m
[31m-      // Calculate basic statistics[m
[31m-      const sum = values.reduce((a, b) => a + b, 0);[m
[31m-      const avg = sum / values.length;[m
[31m-      const max = Math.max(...values);[m
[31m-      const min = Math.min(...values);[m
[31m-      const range = max - min;[m
[31m-      [m
[31m-      // Calculate standard deviation[m
[31m-      const variance = values.reduce((v, value) => v + Math.pow(value - avg, 2), 0) / values.length;[m
[31m-      const stdDev = Math.sqrt(variance);[m
[31m-      [m
[31m-      // Sort values to find median and quartiles[m
[31m-      const sortedValues = [...values].sort((a, b) => a - b);[m
[31m-      const midIndex = Math.floor(sortedValues.length / 2);[m
[31m-      const median = sortedValues.length % 2 === 0 [m
[31m-        ? (sortedValues[midIndex - 1] + sortedValues[midIndex]) / 2 [m
[31m-        : sortedValues[midIndex];[m
[31m-      [m
[31m-      // Find most frequent categories (top 3)[m
[31m-      const categoryFrequency: Record<string, number> = {};[m
[31m-      categories.forEach(cat => {[m
[31m-        categoryFrequency[cat] = (categoryFrequency[cat] || 0) + 1;[m
[31m-      });[m
[31m-      [m
[31m-      const sortedCategories = Object.entries(categoryFrequency)[m
[31m-        .sort((a, b) => b[1] - a[1])[m
[31m-        .slice(0, 3)[m
[31m-        .map(entry => entry[0]);[m
[31m-      [m
[31m-      // Identify distribution type[m
[31m-      let distributionType = '';[m
[31m-      if (Math.abs((avg - median) / avg) > 0.2) {[m
[31m-        // If mean and median differ significantly, distribution is skewed[m
[31m-        distributionType = avg > median [m
[31m-          ? 'a right-skewed (positively skewed) distribution'[m
[31m-          : 'a left-skewed (negatively skewed) distribution';[m
[31m-      } else if (stdDev / avg < 0.1) {[m
[31m-        distributionType = 'a uniform distribution with low variance';[m
[31m-      } else if (stdDev / avg > 0.5) {[m
[31m-        distributionType = 'a highly variable distribution';[m
[31m-      } else {[m
[31m-        distributionType = 'a relatively normal distribution';[m
[31m-      }[m
[31m-      [m
[31m-      // Build a comprehensive summary[m
[31m-      let summary = `Analysis of ${data.length} data points reveals ${distributionType}`;[m
[31m-      [m
[31m-      // Add details based on data size[m
[31m-      if (data.length > 10) {[m
[31m-        summary += ` across ${categories.length} unique categories`;[m
[31m-      }[m
[31m-      [m
[31m-      summary += '.';[m
[31m-      [m
[31m-      // Add statistical insights[m
[31m-      summary += ` The average ${valuesKey} is ${avg.toFixed(2)} (median: ${median.toFixed(2)})`;[m
[31m-      [m
[31m-      if (data.length > 3) {[m
[31m-        summary += `, ranging from ${min.toFixed(2)} to ${max.toFixed(2)}`;[m
[31m-      }[m
[31m-      [m
[31m-      summary += '.';[m
[31m-      [m
[31m-      // Add insights about the spread and distribution[m
[31m-      if (data.length > 5) {[m
[31m-        const cvPercent = (stdDev / avg) * 100;[m
[31m-        summary += ` The coefficient of variation is ${cvPercent.toFixed(1)}%,`;[m
[31m-        [m
[31m-        if (cvPercent < 10) {[m
[31m-          summary += ' indicating highly consistent values with minimal variation.';[m
[31m-        } else if (cvPercent < 30) {[m
[31m-          summary += ' showing moderate variation between data points.';[m
[31m-        } else {[m
[31m-          summary += ' revealing substantial variation across the dataset.';[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      // Add insight about most prominent categories[m
[31m-      if (sortedCategories.length > 0 && data.length > 3) {[m
[31m-        if (sortedCategories.length === 1) {[m
[31m-          summary += ` The only category present is "${sortedCategories[0]}".`;[m
[31m-        } else {[m
[31m-          const categoryList = sortedCategories[m
[31m-            .slice(0, Math.min(3, sortedCategories.length))[m
[31m-            .map(cat => `"${cat}"`)[m
[31m-            .join(', ');[m
[31m-          [m
[31m-          summary += ` The most frequently occurring categories are ${categoryList}.`;[m
[31m-        }[m
[31m-      }[m
[31m-      [m
[31m-      return summary;[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating data summary:', error);[m
[31m-      return `Analysis of ${data.length} data points reveals patterns worth exploring in more detail.`;[m
[31m-    }[m
[31m-  };[m
[31m-  [m
[31m-  // Function to generate multiple visualizations from the same dataset[m
[31m-  const generateMultipleVisualizations = (data: any[]): any[] => {[m
[31m-    if (!data || data.length === 0) return [];[m
[31m-    [m
[31m-    const visualizations = [];[m
[31m-    [m
[31m-    try {[m
[31m-      // Create normalized data where all rows have same structure[m
[31m-      const keys = Object.keys(data[0]);[m
[31m-      const xKey = keys[0];[m
[31m-      const yKey = keys[1] || keys[0];[m
[31m-      [m
[31m-      // Make sure data is properly formatted[m
[31m-      const normalizedData = data.map(item => {[m
[31m-        if (typeof item !== 'object' || item === null) {[m
[31m-          return { category: 'Unknown', value: 0 };[m
[31m-        }[m
[31m-        [m
[31m-        return { [m
[31m-          category: item[xKey] || 'Unknown', [m
[31m-          value: typeof item[yKey] === 'number' ? item[yKey] : parseFloat(item[yKey]) || 0[m
[31m-        };[m
[31m-      });[m
[31m-      [m
[31m-      console.log('Generating multiple visualizations from data:', normalizedData);[m
[31m-      [m
[31m-      // Bar chart - always include for categorical data[m
[31m-      visualizations.push({[m
[31m-        id: 'data-distribution-bar',[m
[31m-        title: 'Data Distribution by Category',[m
[31m-        description: 'Distribution of values across categories',[m
[31m-        type: 'bar',[m
[31m-        data: data, // Use original data format[m
[31m-        xKey: xKey,[m
[31m-        yKey: yKey,[m
[31m-        series: [{ dataKey: yKey, name: 'Value' }],[m
[31m-        xAxisLabel: 'Category',[m
[31m-        yAxisLabel: 'Value',[m
[31m-        options: {[m
[31m-          forceChartType: 'bar'[m
[31m-        }[m
[31m-      });[m
[31m-      [m
[31m-      // Pie chart - good for showing proportions[m
[31m-      visualizations.push({[m
[31m-        id: 'data-distribution-pie',[m
[31m-        title: 'Proportional Distribution',[m
[31m-        description: 'Proportional representation of each category',[m
[31m-        type: 'pie',[m
[31m-        data: data, // Use original data format[m
[31m-        xKey: xKey,[m
[31m-        yKey: yKey,[m
[31m-        series: [{ dataKey: yKey, name: 'Value' }],[m
[31m-        options: {[m
[31m-          forceChartType: 'pie',[m
[31m-          isPieChart: true,[m
[31m-          useMultipleColors: true[m
[31m-        }[m
[31m-      });[m
[31m-      [m
[31m-      // Line chart - for trend visualization[m
[31m-      visualizations.push({[m
[31m-        id: 'data-trend-line',[m
[31m-        title: 'Value Trend Analysis',[m
[31m-        description: 'Trend analysis showing patterns across categories',[m
[31m-        type: 'line',[m
[31m-        data: data, // Use original data format[m
[31m-        xKey: xKey,[m
[31m-        yKey: yKey,[m
[31m-        series: [{ dataKey: yKey, name: 'Value' }],[m
[31m-        xAxisLabel: 'Category',[m
[31m-        yAxisLabel: 'Value',[m
[31m-        options: {[m
[31m-          forceChartType: 'line'[m
[31m-        }[m
[31m-      });[m
[31m-      [m
[31m-      // If there are enough data points, add a treemap[m
[31m-      if (data.length >= 3) {[m
[31m-        visualizations.push({[m
[31m-          id: 'data-treemap',[m
[31m-          title: 'Hierarchical Value Distribution',[m
[31m-          description: 'Treemap showing the relative size of each category',[m
[31m-          type: 'treemap',[m
[31m-          data: data, // Use original data format[m
[31m-          xKey: xKey,[m
[31m-          yKey: yKey, [m
[31m-          options: {[m
[31m-            forceChartType: 'treemap'[m
[31m-          }[m
[31m-        });[m
[31m-      }[m
[31m-    } catch (error) {[m
[31m-      console.error('Error generating multiple visualizations:', error);[m
[31m-    }[m
[31m-    [m
[31m-    return visualizations;[m
[31m-  };[m
[31m-  [m
[31m-  // Add visualization step if visualizationData is provided[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationData && [m
[31m-        visualizationData.data && [m
[31m-        Array.isArray(visualizationData.data) && [m
[31m-        visualizationData.data.length > 0 && [m
[31m-        visualizationData.type) {[m
[31m-      [m
[31m-      // Check if this visualization data already exists in steps[m
[31m-      const dataString = JSON.stringify(visualizationData.data);[m
[31m-      const prevDataString = visualizationDataRef.current;[m
[31m-      [m
[31m-      // Only add a new step if the data has changed[m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationDataRef.current = dataString;[m
[31m-        [m
[31m-        // Check if the step already exists[m
[31m-        const existingStep = steps.find(step => [m
[31m-          step.visualization && [m
[31m-          JSON.stringify(step.visualization.config.data) === dataString[m
[31m-        );[m
[31m-        [m
[31m-        if (!existingStep) {[m
[31m-          // Generate multiple visualizations from the data[m
[31m-          const multipleVizs = generateMultipleVisualizations(visualizationData.data);[m
[31m-          [m
[31m-          // Set the multiple visualizations data directly[m
[31m-          // This is important to ensure the visualizationsData is available for rendering[m
[31m-          if (multipleVizs && multipleVizs.length > 0) {[m
[31m-            console.log(`Generated ${multipleVizs.length} visualizations:`, multipleVizs);[m
[31m-          }[m
[31m-          [m
[31m-          // Generate meaningful insights from the data[m
[31m-          const dataInsights = generateInsightsFromData([m
[31m-            visualizationData.data, [m
[31m-            visualizationData.type,[m
[31m-            visualizationData.xKey,[m
[31m-            visualizationData.yKey[m
[31m-          );[m
[31m-          [m
[31m-          // Generate recommendations[m
[31m-          const dataRecommendations = generateRecommendations(visualizationData.type);[m
[31m-          [m
[31m-          // Generate detailed summary[m
[31m-          const dataSummary = generateSummaryFromData(visualizationData.data);[m
[31m-          [m
[31m-          // Respect the requested chart type[m
[31m-          const chartType = visualizationData.options?.forceChartType || [m
[31m-                           visualizationData.type || [m
[31m-                           (visualizationData.options?.isPieChart ? 'pie' : 'bar');[m
[31m-          [m
[31m-          // Create a new step with proper visualization[m
[31m-          const newStep: AnalyticalStep = {[m
[31m-            id: `viz-${Date.now()}`,[m
[31m-            type: 'visualization',[m
[31m-            description: `Comprehensive Analysis of ${visualizationData.title || 'Dataset'}`,[m
[31m-            order: steps.length + 1,[m
[31m-            content: `## ${visualizationData.title || 'Data Analysis'}\n\n` +[m
[31m-                    `${dataSummary}\n\n` +[m
[31m-                    '```json\n' + [m
[31m-                    JSON.stringify(visualizationData.data, null, 2) + [m
[31m-                    '\n```',[m
[31m-            insights: dataInsights,[m
[31m-            recommendations: dataRecommendations,[m
[31m-            metrics: generateMetricsFromData(visualizationData.data),[m
[31m-            visualization: {[m
[31m-              type: chartType,[m
[31m-              config: {[m
[31m-                data: visualizationData.data,[m
[31m-                xKey: visualizationData.xKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : undefined),[m
[31m-                yKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : undefined),[m
[31m-                series: visualizationData.series || [[m
[31m-                  {[m
[31m-                    dataKey: visualizationData.yKey || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'value'),[m
[31m-                    name: visualizationData.title || 'Value'[m
[31m-                  }[m
[31m-                ],[m
[31m-                labels: {[m
[31m-                  title: visualizationData.title || `Data Analysis`,[m
[31m-                  xAxis: visualizationData.xAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[0] : 'Category'),[m
[31m-                  yAxis: visualizationData.yAxisLabel || (visualizationData.data[0] ? Object.keys(visualizationData.data[0])[1] : 'Value')[m
[31m-                },[m
[31m-                options: {[m
[31m-                  useDirectColorAssignment: true,[m
[31m-                  useMultipleColors: true,[m
[31m-                  theme: document.documentElement.classList.contains('dark') ? 'dark' : 'light',[m
[31m-                  ...visualizationData.options[m
[31m-                }[m
[31m-              }[m
[31m-            }[m
[31m-          };[m
[31m-          [m
[31m-          // Add the new step to the steps array[m
[31m-          setSteps(prevSteps => [...prevSteps, newStep]);[m
[31m-          [m
[31m-          // Auto-expand the new step[m
[31m-          setExpandedSteps(prev => [...prev, newStep.id]);[m
[31m-        }[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationData, steps]);[m
[31m-  [m
[31m-  // New effect to handle visualizationsData property directly[m
[31m-  // This ensures multiple visualization slides are rendered[m
[31m-  useEffect(() => {[m
[31m-    if (visualizationsData && [m
[31m-        Array.isArray(visualizationsData) && [m
[31m-        visualizationsData.length > 0) {[m
[31m-      [m
[31m-      // Check if the visualizations data has changed[m
[31m-      const dataString = JSON.stringify(visualizationsData);[m
[31m-      const prevDataString = visualizationsDataRef.current;[m
[31m-      [m
[31m-      if (dataString !== prevDataString) {[m
[31m-        visualizationsDataRef.current = dataString;[m
[31m-        console.log(`Processing ${visualizationsData.length} visualizations directly from props`);[m
[31m-        [m
[31m-        // Directly set the local visualizations data[m
[31m-        setLocalVisualizationsData(visualizationsData);[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationsData]);[m
[31m-  [m
[31m-  // Make sure initial data for visualizationsData[m
[31m-  useEffect(() => {[m
[31m-    // If we have a single visualization but no multiple visualizations,[m
[31m-    // generate multiple visualizations from the single one[m
[31m-    if (visualizationData && [m
[31m-        visualizationData.data && [m
[31m-        Array.isArray(visualizationData.data) && [m
[31m-        visualizationData.data.length > 0 &&[m
[31m-        (!visualizationsData || visualizationsData.length === 0)) {[m
[31m-      [m
[31m-      // Generate multiple visualizations from visualizationData[m
[31m-      const multipleVizs = generateMultipleVisualizations(visualizationData.data);[m
[31m-      console.log(`Generated ${multipleVizs.length} visualizations from single visualization data`);[m
[31m-      [m
[31m-      // Directly set the visualizations data in state[m
[31m-      if (multipleVizs && multipleVizs.length > 0) {[m
[31m-        // Add an alternative chart type to increase diversity[m
[31m-        const alternateViz = generateAlternateChartType([m
[31m-          visualizationData.data, [m
[31m-          visualizationData.type || 'bar'[m
[31m-        );[m
[31m-        [m
[31m-        // Combine with the generated visualizations[m
[31m-        const combinedVisualizations = [...multipleVizs];[m
[31m-        if (alternateViz) {[m
[31m-          combinedVisualizations.push(alternateViz);[m
[31m-        }[m
[31m-        [m
[31m-        // Set local state[m
[31m-        setLocalVisualizationsData(combinedVisualizations);[m
[31m-        [m
[31m-        // Also log to console for debugging[m
[31m-        console.log('Multiple visualizations set for rendering', combinedVisualizations);[m
[31m-      }[m
[31m-    }[m
[31m-  }, [visualizationData, visualizationsData, generateAlternateChartType]);[m
[31m-[m
[31m-  // Function to generate a new chart type from existing data[m
[31m-  const generateAlternateChartType = useCallback((data: any[], currentType: string) => {[m
[31m-    if (!data || data.length === 0) return null;[m
[31m-    [m
[31m-    // Choose a different chart type than the current one[m
[31m-    const chartTypes = ['bar', 'pie', 'line', 'area', 'treemap'];[m
[31m-    const filteredTypes = chartTypes.filter(type => type !== currentType);[m
[31m-    const randomType = filteredTypes[Math.floor(Math.random() * filteredTypes.length)];[m
[31m-    [m
[31m-    const keys = Object.keys(data[0]);[m
[31m-    return {[m
[31m-      id: `alt-chart-${Date.now()}`,[m
[31m-      title: `Alternative ${randomType.charAt(0).toUpperCase() + randomType.slice(1)} View`,[m
[31m-      description: `${randomType.charAt(0).toUpperCase() + randomType.slice(1)} chart visualization of the same data`,[m
[31m-      type: randomType,[m
[31m-      data: data,[m
[31m-      xKey: keys[0],[m
[31m-      yKey: keys[1] || 'value',[m
[31m-      options: {[m
[31m-        forceChartType: randomType,[m
[31m-        useMultipleColors: true[m
[31m-      }[m
[31m-    };[m
[31m-  }, []);[m
[31m-[m
[31m-  // Add listener for the custom event to update visualizationsData[m
[31m-  useEffect(() => {[m
[31m-    const handleVisualizationsGenerated = (event: any) => {[m
[31m-      const generatedVisualizations = event.detail?.visualizations;[m
[31m-      if (generatedVisualizations && Array.isArray(generatedVisualizations)) {[m
[31m-        console.log(`Received ${generatedVisualizations.length} visualizations from event`);[m
[31m-        [m
[31m-        // Update component state with the new visualizations[m
[31m-        if (visualizationData && visualizationData.data) {[m
[31m-          // Add an alternative chart type to increase diversity[m
[31m-          const alternateViz = generateAlternateChartType([m
[31m-            visualizationData.data, [m
[31m-            visualizationData.type || 'bar'[m
[31m-          );[m
[31m-          [m
[31m-          // Combine with the generated visualizations[m
[31m-          const combinedVisualizations = [...generatedVisualizations];[m
[31m-          if (alternateViz) {[m
[31m-            combinedVisualizations.push(alternateViz);[m
[31m-          }[m
[31m-          [m
[31m-          // Force an update to the DOM[m
[31m-          console.log('Setting multiple visualizations for rendering', combinedVisualizations);[m
[31m-          visualizationsDataRef.current = JSON.stringify(combinedVisualizations);[m
[31m-          [m
[31m-          // Force a component re-render[m
[31m-          // This will trigger the rendering of the visualization slides[m
[31m-          setIsReady(prev => !prev);[m
[31m-          setTimeout(() => setIsReady(prev => !prev), 50);[m
[31m-        }[m
[31m-      }[m
[31m-    };[m
[31m-    [m
[31m-    window.addEventListener('multipleVisualizationsGenerated', handleVisualizationsGenerated);[m
[31m-    return () => {[m
[31m-      window.removeEventListener('multipleVisualizationsGenerated', handleVisualizationsGenerated);[m
[31m-    };[m
[31m-  }, [visualizationData, generateAlternateChartType]);[m
[31m-  [m
[31m-  // If no steps, show placeholder[m
[31m-  if ((!steps || steps.length === 0) && insights.length === 0 && !summary && !visualizationData && (!visualizationsData || visualizationsData.length === 0)) {[m
[31m-    return ([m
[31m-      <div className="rag-response-container">[m
[31m-        <div className="text-center text-gray-500 dark:text-gray-400 p-4">[m
[31m-          No visualization data available[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  }[m
[31m-  [m
[31m-  // Render a loading placeholder if not ready[m
[31m-  const renderLoadingPlaceholder = () => {[m
[31m-    return ([m
[31m-      <div className="p-4 bg-white dark:bg-gray-800 rounded-lg animate-pulse">[m
[31m-        <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4"></div>[m
[31m-        <div className="space-y-2">[m
[31m-          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>[m
[31m-          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>[m
[31m-          <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded"></div>[m
[31m-        </div>[m
[31m-      </div>[m
[31m-    );[m
[31m-  };[m
[31m-[m
[31m-  // Check if we should render content or loading placeholder[m
[31m-  const shouldRenderContent = isReady || initialSteps.length > 0 || summary || visualizationData || (visualizationsData && visualizationsData.length > 0);[m
[31m-[m
[31m-  // Return the appropriate content[m
[31m-  if (!shouldRenderContent) {[m
[31m-    return renderLoadingPlaceholder();[m
[31m-  }[m
[31m-  [m
[31m-  // Function to navigate between slides[m
[31m-  const navigateSlide = (direction: 'next' | 'prev' | number) => {[m
[31m-    if (!localVisualizationsData || localVisualizationsData.length === 0) return;[m
[31m-    [m
[31m-    if (typeof direction === 'number') {[m
[31m-      // Direct navigation to a specific slide[m
[31m-      if (direction >= 0 && direction < localVisualizationsData.length) {[m
[31m-        setCurrentSlide(direction);[m
[31m-      }[m
[31m-    } else if (direction === 'next') {[m
[31m-      setCurrentSlide(current => (current + 1) % localVisualizationsData.length);[m
[31m-    } else {[m
[31m-      setCurrentSlide(current => (current - 1 + localVisualizationsData.length) % localVisualizationsData.length);[m
[31m-    }[m
[31m-  };[m
[31m-[m
[31m-  // Render visualization slides section if available[m
[31m-  const renderVisualizationSlides = () => {[m
[31m-    if (!localVisualizationsData || localVisualizationsData.length === 0) {[m
[31m-      return null;[m
[31m-    }[m
[31m-    [m
[31m-    // Get current visualization[m
[31m-    const currentViz = localVisualizationsData[currentSlide];[m
[31m-    if (!currentViz) return null;[m
[31m-    [m
[31m-    return ([m
[31m-      <div className="section mb-6">[m
[31m-        <h3 className="text-lg font-semibold mb-3 text-gray-800 dark:text-gray-100 flex items-center justify-between">[m
[31m-          <div className="flex items-center">[m
[31m-            <span className="bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-300 w-7 h-7 rounded-full flex items-center justify-center mr-2 text-sm">[m
[31m-              3[m
[31m-            </span>[m
[31m-            <span>Visualizations</span>[m
[31m-            <span className="ml-2 text-sm text-gray-500 dark:text-gray-400">[m
[31m-              ({currentSlide + 1} of {localVisualizationsData.length})[m
[31m-            </span>[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Navigation controls */}[m
[31m-          <div className="flex items-center space-x-2">[m
[31m-            <button [m
[31m-              onClick={() => navigateSlide('prev')}[m
[31m-              className="p-1 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition"[m
[31m-              aria-label="Previous visualization"[m
[31m-              disabled={localVisualizationsData.length <= 1}[m
[31m-            >[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">[m
[31m-                <path fillRule="evenodd" d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z" clipRule="evenodd" />[m
[31m-              </svg>[m
[31m-            </button>[m
[31m-            <button [m
[31m-              onClick={() => navigateSlide('next')}[m
[31m-              className="p-1 rounded-full bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 transition"[m
[31m-              aria-label="Next visualization"[m
[31m-              disabled={localVisualizationsData.length <= 1}[m
[31m-            >[m
[31m-              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">[m
[31m-                <path fillRule="evenodd" d="M7.21 14.77a.75.75 0 01.02-1.06L11.168 10 7.23 6.29a.75.75 0 111.04-1.08l4.5 4.25a.75.75 0 010 1.08l-4.5 4.25a.75.75 0 01-1.06-.02z" clipRule="evenodd" />[m
[31m-              </svg>[m
[31m-            </button>[m
[31m-          </div>[m
[31m-        </h3>[m
[31m-        [m
[31m-        <div className="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700/80 p-5 backdrop-blur-sm">[m
[31m-          {/* Slide header */}[m
[31m-          <div className="mb-4">[m
[31m-            <h4 className="text-base font-medium text-gray-900 dark:text-gray-100">{currentViz.title || 'Data Visualization'}</h4>[m
[31m-            {currentViz.description && ([m
[31m-              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{currentViz.description}</p>[m
[31m-            )}[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Visualization with insights */}[m
[31m-          <div className="mb-4">[m
[31m-            {renderVisualization(currentViz)}[m
[31m-          </div>[m
[31m-          [m
[31m-          {/* Slide indicator dots */}[m
[31m-          {localVisualizationsData.length > 1 && ([m
[31m-            <div className="flex justify-center mt-4 space-x-2">[m
[31m-              {localVisualizationsData.map((_, index) => ([m
[31m-                <button[m
[31m-                  key={index}[m
[31m-                  onClick={() => navigateSlide(index)}[m
[31m-                  className={`w-2 h-2 rounded-full ${[m
[31m-                    index === currentSlide [m
[31m-                      ? 'bg-blue-600 dark:bg-blue-400' [m
[31m-                      : 'bg-gray-300 dark:bg-gray-600 hover:bg-gray-400 dark:hover:bg-gray-500'[m
[31m-                  }`}[m
[31m-                  aria-label={`Go to slide ${index + 1}`}[m
[31m-                />[m
[31m-              ))}[m
[31m-            </div>[m
[31m-          )}[m
[31m-          [m
[31m-          {/* Data table toggle */}[m
[31m-          <div className="mt-4 border-t border-gray-100 dark:border-gray-700 pt-4">[m
[31m-            <button[m
[31m-              onClick={() => setShowDataTable(!showDataTable)}[m
[31m-              className="flex items-center text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100"[m
[31m-            >[m
[31m-              {showDataTable ? ([m
[31m-                <>[m
[31m-                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4 mr-1">[m
[31m-                    <path fillRule="evenodd" d="M14.77 12.79a.75.75 0 01-1.06-.02L10 8.832 6.29 12.77a.75.75 0 11-1.08-1.04l4.25-4.5a.75.75 0 011.08 0l4.25 4.5a.75.75 0 01-.02 1.06z" clipRule="evenodd" />[m
[31m-                  </svg>[m
[31m-                  Hide Data Source[m
[31m-                </>[m
[31m-              ) : ([m
[31m-                <>[m
[31m-                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-4 h-4 mr-1">[m
[31m-                    <path fillRule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75